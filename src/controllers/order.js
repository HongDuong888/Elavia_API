import Order from "../models/order.js";
import ProductVariantSnapshot from "../models/productVariantSnapshot.js";
import Voucher from "../models/vocher.js";
import Review from "../models/review.js";
import ProductVariant from "../models/productVariant.js";
import { getShippingFeeOrder } from "./shippingApi.js";
import mongoose from "mongoose";
import { sendOrderEmail } from "../utils/sendOrderEmail.js";
import { sendTelegramMessage } from "../utils/sendTelegram.js";
import {
  processAutoRefund,
  refundMoMo,
  refundZaloPay,
  checkMoMoRefundStatus,
  checkZaloPayRefundStatus,
} from "../utils/refundAPI.js";
import axios from "axios";

// X·ª≠ l√Ω ho√†n ti·ªÅn cho ƒë∆°n h√†ng b·ªã h·ªßy
const processRefundForCancelledOrder = async (order, userId) => {
  try {
    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n th·ª±c t·∫ø t·ª´ API MoMo/ZaloPay
    let actualPaymentStatus = order.paymentStatus;
    let isPaymentConfirmed = false;

    if (order.paymentMethod === "MoMo") {
      try {
        // G·ªçi API ki·ªÉm tra tr·∫°ng th√°i MoMo th·ª±c t·∫ø nh∆∞ trong cronjob
        const response = await axios.post(
          `${
            process.env.URL_CRONJOB || "http://localhost:5175"
          }/api/orders/momo/transaction`,
          {
            orderId: order.orderId,
          }
        );

        console.log(
          `üîç MoMo payment check for ${order.orderId}:`,
          response.data
        );

        if (response.data?.resultCode === 0) {
          actualPaymentStatus = "ƒê√£ thanh to√°n";
          isPaymentConfirmed = true;
          console.log(`‚úÖ MoMo payment confirmed via API for ${order.orderId}`);
        } else {
          console.log(
            `‚ùå MoMo payment not confirmed, resultCode: ${response.data?.resultCode}`
          );
        }
      } catch (error) {
        console.log(
          `‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i MoMo cho ${order.orderId}:`,
          error.message
        );
      }
    } else if (order.paymentMethod === "zalopay") {
      try {
        // G·ªçi API ki·ªÉm tra tr·∫°ng th√°i ZaloPay th·ª±c t·∫ø nh∆∞ trong cronjob
        const response = await axios.post(
          `${
            process.env.URL_CRONJOB || "http://localhost:5175"
          }/api/orders/zalopay/transaction`,
          {
            app_trans_id: order.orderId,
          }
        );

        console.log(
          `üîç ZaloPay payment check for ${order.orderId}:`,
          response.data
        );

        if (response.data?.return_code === 1) {
          actualPaymentStatus = "ƒê√£ thanh to√°n";
          isPaymentConfirmed = true;
          console.log(
            `‚úÖ ZaloPay payment confirmed via API for ${order.orderId}`
          );
        } else {
          console.log(
            `‚ùå ZaloPay payment not confirmed, return_code: ${response.data?.return_code}`
          );
        }
      } catch (error) {
        console.log(
          `‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ZaloPay cho ${order.orderId}:`,
          error.message
        );
      }
    }

    // Ch·ªâ ho√†n ti·ªÅn cho ƒë∆°n h√†ng ƒë√£ thanh to√°n (th·ª±c t·∫ø)
    if (!isPaymentConfirmed && actualPaymentStatus !== "ƒê√£ thanh to√°n") {
      return {
        requiresRefund: false,
        message: `ƒê∆°n h√†ng ch∆∞a thanh to√°n th·ª±c t·∫ø qua API ${order.paymentMethod} (DB Status: ${order.paymentStatus}), kh√¥ng c·∫ßn ho√†n ti·ªÅn`,
        status: "no_refund_needed",
      };
    }

    console.log(
      `‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng ${order.orderId} ƒë√£ thanh to√°n qua API ${order.paymentMethod}, ti·∫øn h√†nh ho√†n ti·ªÅn...`
    );

    const refundInfo = {
      requiresRefund: true,
      amount: order.finalAmount,
      paymentMethod: order.paymentMethod,
      refundRequestedAt: new Date(),
      refundRequestedBy: userId, // S·ª≠ d·ª•ng userId thay v√¨ string
      orderId: order.orderId,
    };

    switch (order.paymentMethod) {
      case "MoMo":
        try {
          // G·ªçi tr·ª±c ti·∫øp API ho√†n ti·ªÅn MoMo
          const momoRefundResult = await refundMoMo({
            orderId: order.orderId,
            amount: order.finalAmount,
            description: `Ho√†n ti·ªÅn ƒë∆°n h√†ng ${order.orderId}`,
          });

          if (momoRefundResult.success) {
            // Ho√†n ti·ªÅn th√†nh c√¥ng
            order.paymentDetails = {
              ...order.paymentDetails,
              refundRequested: true,
              refundRequestedAt: new Date(),
              refundRequestedBy: userId,
              refundStatus: "completed",
              refundAmount: order.finalAmount,
              refundTransactionId: momoRefundResult.refundId,
              refundProcessedAt: new Date(),
              refundNote: "Ho√†n ti·ªÅn t·ª± ƒë·ªông qua MoMo API",
            };

            return {
              ...refundInfo,
              message: "Ho√†n ti·ªÅn MoMo th√†nh c√¥ng qua API",
              status: "momo_refund_completed",
              autoRefund: true,
              refundId: momoRefundResult.refundId,
            };
          } else {
            // Ho√†n ti·ªÅn th·∫•t b·∫°i, chuy·ªÉn sang x·ª≠ l√Ω th·ªß c√¥ng
            order.paymentDetails = {
              ...order.paymentDetails,
              refundRequested: true,
              refundRequestedAt: new Date(),
              refundRequestedBy: userId,
              refundStatus: "pending",
              refundAmount: order.finalAmount,
              refundNote: `API ho√†n ti·ªÅn MoMo th·∫•t b·∫°i: ${momoRefundResult.error}`,
            };

            return {
              ...refundInfo,
              message: "API ho√†n ti·ªÅn MoMo th·∫•t b·∫°i. Admin s·∫Ω x·ª≠ l√Ω th·ªß c√¥ng.",
              status: "momo_refund_failed_manual_required",
              autoRefund: false,
              error: momoRefundResult.error,
            };
          }
        } catch (error) {
          // L·ªói khi g·ªçi API
          order.paymentDetails = {
            ...order.paymentDetails,
            refundRequested: true,
            refundRequestedAt: new Date(),
            refundRequestedBy: userId,
            refundStatus: "failed",
            refundAmount: order.finalAmount,
            refundNote: `L·ªói khi g·ªçi API MoMo: ${error.message}`,
          };

          return {
            ...refundInfo,
            message: "L·ªói khi g·ªçi API MoMo ho√†n ti·ªÅn",
            status: "momo_refund_error",
            autoRefund: false,
            error: error.message,
          };
        }

      case "zalopay":
        try {
          // G·ªçi tr·ª±c ti·∫øp API ho√†n ti·ªÅn ZaloPay
          const zalopayRefundResult = await refundZaloPay({
            orderId: order.orderId,
            amount: order.finalAmount,
            description: `Ho√†n ti·ªÅn ƒë∆°n h√†ng ${order.orderId}`,
          });

          if (zalopayRefundResult.success) {
            // Ho√†n ti·ªÅn th√†nh c√¥ng
            order.paymentDetails = {
              ...order.paymentDetails,
              refundRequested: true,
              refundRequestedAt: new Date(),
              refundRequestedBy: userId,
              refundStatus: "completed",
              refundAmount: order.finalAmount,
              refundTransactionId: zalopayRefundResult.refundId,
              refundProcessedAt: new Date(),
              refundNote: "Ho√†n ti·ªÅn t·ª± ƒë·ªông qua ZaloPay API",
            };

            return {
              ...refundInfo,
              message: "Ho√†n ti·ªÅn ZaloPay th√†nh c√¥ng qua API",
              status: "zalopay_refund_completed",
              autoRefund: true,
              refundId: zalopayRefundResult.refundId,
            };
          } else {
            // Ho√†n ti·ªÅn th·∫•t b·∫°i, chuy·ªÉn sang x·ª≠ l√Ω th·ªß c√¥ng
            order.paymentDetails = {
              ...order.paymentDetails,
              refundRequested: true,
              refundRequestedAt: new Date(),
              refundRequestedBy: userId,
              refundStatus: "pending",
              refundAmount: order.finalAmount,
              refundNote: `API ho√†n ti·ªÅn ZaloPay th·∫•t b·∫°i: ${zalopayRefundResult.error}`,
            };

            return {
              ...refundInfo,
              message:
                "API ho√†n ti·ªÅn ZaloPay th·∫•t b·∫°i. Admin s·∫Ω x·ª≠ l√Ω th·ªß c√¥ng.",
              status: "zalopay_refund_failed_manual_required",
              autoRefund: false,
              error: zalopayRefundResult.error,
            };
          }
        } catch (error) {
          // L·ªói khi g·ªçi API
          order.paymentDetails = {
            ...order.paymentDetails,
            refundRequested: true,
            refundRequestedAt: new Date(),
            refundRequestedBy: userId,
            refundStatus: "failed",
            refundAmount: order.finalAmount,
            refundNote: `L·ªói khi g·ªçi API ZaloPay: ${error.message}`,
          };

          return {
            ...refundInfo,
            message: "L·ªói khi g·ªçi API ZaloPay ho√†n ti·ªÅn",
            status: "zalopay_refund_error",
            autoRefund: false,
            error: error.message,
          };
        }

      case "COD":
        // COD ƒë√£ thanh to√°n c√≥ nghƒ©a l√† ƒë√£ giao h√†ng th√†nh c√¥ng
        // C·∫ßn x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng
        order.paymentDetails = {
          ...order.paymentDetails,
          refundRequested: true,
          refundRequestedAt: new Date(),
          refundRequestedBy: userId,
          refundStatus: "pending",
          refundAmount: order.finalAmount,
          refundNote: "ƒê∆°n COD c·∫ßn x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng",
        };

        return {
          ...refundInfo,
          message:
            "ƒê∆°n COD ƒë√£ thanh to√°n c·∫ßn x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng. Admin s·∫Ω li√™n h·ªá trong 24h.",
          status: "cod_manual_refund_required",
          instructions:
            "Admin s·∫Ω li√™n h·ªá ƒë·ªÉ th·ªèa thu·∫≠n ph∆∞∆°ng th·ª©c ho√†n ti·ªÅn (chuy·ªÉn kho·∫£n)",
        };

      default:
        return {
          ...refundInfo,
          message: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng x√°c ƒë·ªãnh. C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng.",
          status: "manual_refund_required",
          instructions: "Li√™n h·ªá support ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£",
        };
    }
  } catch (error) {
    console.error("Error processing refund:", error);
    return {
      requiresRefund: true,
      message: "C√≥ l·ªói khi x·ª≠ l√Ω ho√†n ti·ªÅn. Admin s·∫Ω xem x√©t th·ªß c√¥ng.",
      status: "refund_error",
      error: error.message,
    };
  }
};

// Helper function ƒë·ªÉ l∆∞u l·ªãch s·ª≠ thay ƒë·ªïi tr·∫°ng th√°i
const addStatusHistory = (
  order,
  type,
  fromStatus,
  toStatus,
  updatedBy = null,
  note = "",
  reason = "",
  isAutomatic = false
) => {
  if (!order.statusHistory) {
    order.statusHistory = [];
  }

  order.statusHistory.push({
    type,
    from: fromStatus,
    to: toStatus,
    updatedBy,
    updatedAt: new Date(),
    note,
    reason,
    isAutomatic,
  });
};
export const calculateShippingInfoFromCart = (items) => {
  const validItems = items.filter((item) => {
    return (
      item &&
      item.productVariantId &&
      item.price &&
      item.quantity &&
      !isNaN(Number(item.price))
    );
  });

  const insurance_value = validItems.reduce((sum, item) => {
    return sum + Number(item.price) * item.quantity;
  }, 0);

  const total_weight = validItems.reduce((sum, item) => {
    return sum + item.quantity * 300; // 300g m·ªói s·∫£n ph·∫©m (c√≥ th·ªÉ ch·ªânh)
  }, 0);

  const total_height = validItems.reduce((sum, item) => {
    return sum + item.quantity * 4;
  }, 0);

  const total_length = 25;
  const total_width = 20;

  return {
    insurance_value,
    total_weight,
    total_height,
    total_length,
    total_width,
  };
};

export const createOrder = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const {
      orderId,
      receiver,
      items,
      totalPrice,
      paymentMethod,
      voucherCode,
      orderInfo = "",
      extraData = "",
      orderGroupId = "",
      paymentUrl = "",
      momoTransactionId = "", // Th√™m ƒë·ªÉ l∆∞u transaction ID t·ª´ MoMo
    } = req.body;

    const user = {
      _id: req.user.id,
      email: req.user.email,
    };

    // Validate c∆° b·∫£n
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng" });
    }

    if (
      !receiver ||
      !receiver.cityName ||
      !receiver.districtName ||
      !receiver.wardName
    ) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ng∆∞·ªùi nh·∫≠n" });
    }

    // T√≠nh to√°n th√¥ng tin v·∫≠n chuy·ªÉn
    const {
      insurance_value,
      total_weight,
      total_height,
      total_length,
      total_width,
    } = calculateShippingInfoFromCart(items);

    const shippingFee = await getShippingFeeOrder(
      receiver,
      insurance_value,
      total_weight,
      total_height,
      total_length,
      total_width
    );

    // X·ª≠ l√Ω voucher
    let appliedVoucher = null;
    let discountAmount = 0;

    if (voucherCode) {
      const voucher = await Voucher.findOne({ code: voucherCode });

      if (!voucher) {
        return res.status(400).json({ message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
      }
      if (!voucher.isActive) {
        return res
          .status(400)
          .json({ message: "M√£ gi·∫£m gi√° ƒë√£ b·ªã v√¥ hi·ªáu h√≥a" });
      }
      if (voucher.expiresAt && new Date(voucher.expiresAt) < new Date()) {
        return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n" });
      }
      if (voucher.quantity <= 0) {
        return res
          .status(400)
          .json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng" });
      }
      if (voucher.usedBy.includes(req.user.id)) {
        return res.status(400).json({ message: "B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ n√†y r·ªìi" });
      }
      if (totalPrice < (voucher.minOrderValue || 0)) {
        return res
          .status(400)
          .json({ message: "Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán √°p d·ª•ng m√£ gi·∫£m gi√°" });
      }

      appliedVoucher = voucher;

      if (voucher.type === "percent") {
        discountAmount = (totalPrice * voucher.value) / 100;
        if (voucher.maxDiscount) {
          discountAmount = Math.min(discountAmount, voucher.maxDiscount);
        }
      } else if (voucher.type === "fixed") {
        discountAmount = voucher.value;
      }
    }

    const finalAmount = totalPrice + shippingFee - discountAmount;

    if (finalAmount < 0) {
      return res.status(400).json({ message: "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    // 1. Ki·ªÉm tra t·ªìn kho v√† l·∫•y version cho t·ª´ng s·∫£n ph·∫©m
    const validatedItems = [];
    for (const item of items) {
      const variant = await ProductVariant.findById(item.productVariantId);
      if (!variant) {
        return res.status(400).json({
          message: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi id ${item.productVariantId}`,
        });
      }

      const sizeEntry = variant.sizes.find((s) => s.size === item.size);
      if (!sizeEntry) {
        return res.status(400).json({
          message: `Kh√¥ng t√¨m th·∫•y size ${item.size} cho s·∫£n ph·∫©m ${variant._id}`,
        });
      }

      if (sizeEntry.stock < item.quantity) {
        return res.status(400).json({
          message: `S·∫£n ph·∫©m "${item.productName || variant.name}" - Size ${
            item.size
          } kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng. Hi·ªán c√≤n ${sizeEntry.stock}`,
        });
      }

      // Th√™m version v√†o item
      validatedItems.push({
        ...item,
        version: variant.version || 1, // L∆∞u version hi·ªán t·∫°i c·ªßa variant
      });
    }

    // X√°c ƒë·ªãnh tr·∫°ng th√°i ban ƒë·∫ßu d·ª±a tr√™n payment method
    const getInitialPaymentStatus = (paymentMethod) => {
      switch (paymentMethod) {
        case "MoMo":
        case "zalopay":
          return "Ch·ªù thanh to√°n";
        case "COD":
        default:
          return "Thanh to√°n khi nh·∫≠n h√†ng";
      }
    };
    const getInitialShippingStatus = () => "Ch·ªù x√°c nh·∫≠n";

    // T·∫°o payment details cho MoMo n·∫øu c·∫ßn
    let paymentDetails = null;
    if (paymentMethod === "MoMo" && momoTransactionId) {
      paymentDetails = {
        momoTransactionId,
        refundRequested: false,
        refundProcessed: false,
      };
    }

    const orderData = {
      orderId,
      user,
      receiver,
      items: validatedItems,
      totalPrice,
      shippingFee,
      discountAmount,
      finalAmount,
      paymentMethod,
      paymentUrl,
      paymentDetails,
      voucher: appliedVoucher
        ? {
            code: appliedVoucher.code,
            value: appliedVoucher.value,
            type: appliedVoucher.type,
            maxDiscount: appliedVoucher.maxDiscount,
          }
        : null,
      paymentStatus: getInitialPaymentStatus(paymentMethod),
      shippingStatus: getInitialShippingStatus(),
      statusHistory: [
        {
          type: "payment",
          from: "Kh·ªüi t·∫°o",
          to: getInitialPaymentStatus(paymentMethod),
          updatedBy: req.user.id,
          updatedAt: new Date(),
          note: "T·∫°o ƒë∆°n h√†ng m·ªõi",
          reason: "Kh√°ch h√†ng ƒë·∫∑t h√†ng",
          isAutomatic: false,
        },
        {
          type: "shipping",
          from: "Kh·ªüi t·∫°o",
          to: getInitialShippingStatus(),
          updatedBy: req.user.id,
          updatedAt: new Date(),
          note: "T·∫°o ƒë∆°n h√†ng m·ªõi",
          reason: "Kh√°ch h√†ng ƒë·∫∑t h√†ng",
          isAutomatic: false,
        },
      ],
    };

    const order = new Order(orderData);
    await order.save({ session });

    // 2. Tr·ª´ stock cho t·ª´ng s·∫£n ph·∫©m/size
    for (const item of validatedItems) {
      const updated = await ProductVariant.updateOne(
        {
          _id: item.productVariantId,
          "sizes.size": item.size,
        },
        {
          $inc: { "sizes.$.stock": -item.quantity },
        },
        { session }
      );

      if (!updated.modifiedCount) {
        throw new Error(
          `Kh√¥ng th·ªÉ tr·ª´ stock cho s·∫£n ph·∫©m ${item.productVariantId}, size ${item.size}`
        );
      }
    }

    // 3. C·∫≠p nh·∫≠t voucher n·∫øu c√≥
    if (appliedVoucher) {
      appliedVoucher.usedBy.push(req.user.id);
      appliedVoucher.quantity -= 1;
      await appliedVoucher.save({ session });
    }

    // 4. Commit transaction
    await session.commitTransaction();

    // // 5. G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
    // const trackingUrl = `${
    //   process.env.FRONTEND_URL || "http://localhost:5173"
    // }/order-details/${order._id}`;
    // try {
    //   await sendOrderEmail({
    //     to: user.email,
    //     order,
    //     trackingUrl,
    //   });
    // } catch (err) {
    //   console.error("G·ª≠i email th·∫•t b·∫°i:", err);
    // }

    // 6. G·ª≠i th√¥ng b√°o Telegram cho admin
    // try {
    //   await sendTelegramMessage(
    //     `üõí ƒê∆°n h√†ng m·ªõi!\n` +
    //       `üìã M√£ ƒë∆°n: ${orderId}\n` +
    //       `üí∞ T·ªïng ti·ªÅn: ${finalAmount.toLocaleString("vi-VN")}ƒë\n` +
    //       `üí≥ Thanh to√°n: ${paymentMethod}\n` +
    //       `üìß Kh√°ch h√†ng: ${user.email}`
    //   );
    // } catch (err) {
    //   console.error("G·ª≠i Telegram th·∫•t b·∫°i:", err);
    // }

    return res.status(201).json({
      message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      order,
      success: true,
    });
  } catch (error) {
    console.error("Error in createOrder:", error);

    // Rollback transaction n·∫øu c√≥ l·ªói
    if (session.inTransaction()) {
      await session.abortTransaction();
    }

    return res.status(500).json({
      message: "L·ªói khi t·∫°o ƒë∆°n h√†ng",
      error: error.message,
      success: false,
    });
  } finally {
    // ƒê·∫£m b·∫£o lu√¥n ƒë√≥ng session
    if (session) {
      session.endSession();
    }
  }
};
export const confirmReceivedOrder = async (req, res) => {
  try {
    const { orderId } = req.params;

    const order = await Order.findOne({
      orderId,
      "user._id": req.user.id,
      shippingStatus: "Giao h√†ng th√†nh c√¥ng",
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n ho·∫∑c tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá",
      });
    }

    const statusChanges = [];
    const updateData = {
      shippingStatus: "ƒê√£ nh·∫≠n h√†ng",
    };

    // Th√™m l·ªãch s·ª≠ thay ƒë·ªïi shipping status
    statusChanges.push({
      type: "shipping",
      from: "Giao h√†ng th√†nh c√¥ng",
      to: "ƒê√£ nh·∫≠n h√†ng",
      updatedBy: req.user.id,
      updatedAt: new Date(),
      note: "Kh√°ch h√†ng x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng",
      reason: "Kh√°ch h√†ng x√°c nh·∫≠n nh·∫≠n h√†ng",
      isAutomatic: false,
    });

    // N·∫øu COD th√¨ c≈©ng c·∫≠p nh·∫≠t payment status
    if (
      order.paymentMethod === "COD" &&
      order.paymentStatus === "Thanh to√°n khi nh·∫≠n h√†ng"
    ) {
      updateData.paymentStatus = "ƒê√£ thanh to√°n";
      statusChanges.push({
        type: "payment",
        from: "Thanh to√°n khi nh·∫≠n h√†ng",
        to: "ƒê√£ thanh to√°n",
        updatedBy: req.user.id,
        updatedAt: new Date(),
        note: "X√°c nh·∫≠n thanh to√°n COD khi nh·∫≠n h√†ng",
        reason: "Kh√°ch h√†ng x√°c nh·∫≠n nh·∫≠n h√†ng - Thanh to√°n COD",
        isAutomatic: false,
      });
    }

    await Order.updateOne(
      { _id: order._id },
      {
        $set: updateData,
        $push: { statusHistory: { $each: statusChanges } },
      }
    );

    res.json({ success: true, message: "X√°c nh·∫≠n nh·∫≠n h√†ng th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå Error in confirmReceivedOrder:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};
// L·∫•y danh s√°ch ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i thanh to√°n l√† 'Ch·ªù thanh to√°n'
export const getPendingPaymentOrders = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({
        message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p",
        success: false,
      });
    }
    const orders = await Order.find({
      paymentStatus: "Ch·ªù thanh to√°n",
      "user._id": req.user.id,
    })
      .populate({ path: "items.productVariantId", model: "ProductVariant" })
      .lean();
    return res.status(200).json({
      data: orders,
      total: orders.length,
      success: true,
    });
  } catch (error) {
    return res.status(500).json({
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù thanh to√°n",
      error: error.message,
      success: false,
    });
  }
};
export const cancelOrder = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const { orderId, cancelBy, reason } = req.body;
    const order = await Order.findOne({ orderId });
    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    const statusChanges = [];
    let newPaymentStatus, newShippingStatus;

    // Ki·ªÉm tra quy·ªÅn v√† ƒëi·ªÅu ki·ªán h·ªßy ƒë∆°n h√†ng
    if (cancelBy === "buyer") {
      if (order.user._id.toString() !== req.user.id.toString()) {
        return res
          .status(403)
          .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n n√†y" });
      }

      // User ch·ªâ ƒë∆∞·ª£c h·ªßy khi ch∆∞a b·∫Øt ƒë·∫ßu giao h√†ng
      const allowedShippingStatuses = ["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n"];
      if (!allowedShippingStatuses.includes(order.shippingStatus)) {
        return res.status(400).json({
          message: "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng khi ƒë√£ b·∫Øt ƒë·∫ßu giao h√†ng",
        });
      }

      newPaymentStatus = "Ng∆∞·ªùi mua hu·ª∑";
      newShippingStatus = "Ng∆∞·ªùi mua hu·ª∑";

      // Th√™m l·ªãch s·ª≠ thay ƒë·ªïi
      statusChanges.push(
        {
          type: "payment",
          from: order.paymentStatus,
          to: newPaymentStatus,
          updatedBy: req.user.id,
          updatedAt: new Date(),
          note: "Ng∆∞·ªùi mua h·ªßy ƒë∆°n h√†ng",
          reason: reason || "Ng∆∞·ªùi mua h·ªßy ƒë∆°n h√†ng",
          isAutomatic: false,
        },
        {
          type: "shipping",
          from: order.shippingStatus,
          to: newShippingStatus,
          updatedBy: req.user.id,
          updatedAt: new Date(),
          note: "Ng∆∞·ªùi mua h·ªßy ƒë∆°n h√†ng",
          reason: reason || "Ng∆∞·ªùi mua h·ªßy ƒë∆°n h√†ng",
          isAutomatic: false,
        }
      );
    } else if (cancelBy === "seller" || cancelBy === "admin") {
      // Admin/Seller c√≥ th·ªÉ h·ªßy tr∆∞·ªõc khi giao h√†ng th√†nh c√¥ng
      const allowedShippingStatuses = [
        "Ch·ªù x√°c nh·∫≠n",
        "ƒê√£ x√°c nh·∫≠n",
        "ƒêang giao h√†ng",
        "Giao h√†ng th·∫•t b·∫°i",
      ];

      if (!allowedShippingStatuses.includes(order.shippingStatus)) {
        return res.status(400).json({
          message:
            "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i n√†y. Ch·ªâ c√≥ th·ªÉ h·ªßy tr∆∞·ªõc khi giao h√†ng th√†nh c√¥ng.",
        });
      }

      newPaymentStatus = "Ng∆∞·ªùi b√°n hu·ª∑";
      newShippingStatus = "Ng∆∞·ªùi b√°n hu·ª∑";

      // Th√™m l·ªãch s·ª≠ thay ƒë·ªïi
      statusChanges.push(
        {
          type: "payment",
          from: order.paymentStatus,
          to: newPaymentStatus,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: `${cancelBy === "admin" ? "Admin" : "Ng∆∞·ªùi b√°n"} h·ªßy ƒë∆°n h√†ng`,
          reason:
            reason ||
            `${cancelBy === "admin" ? "Admin" : "Ng∆∞·ªùi b√°n"} h·ªßy ƒë∆°n h√†ng`,
          isAutomatic: false,
        },
        {
          type: "shipping",
          from: order.shippingStatus,
          to: newShippingStatus,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: `${cancelBy === "admin" ? "Admin" : "Ng∆∞·ªùi b√°n"} h·ªßy ƒë∆°n h√†ng`,
          reason:
            reason ||
            `${cancelBy === "admin" ? "Admin" : "Ng∆∞·ªùi b√°n"} h·ªßy ƒë∆°n h√†ng`,
          isAutomatic: false,
        }
      );
    } else {
      return res.status(400).json({
        message:
          "Gi√° tr·ªã cancelBy kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 'seller', 'admin' ho·∫∑c 'buyer'",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    order.paymentStatus = newPaymentStatus;
    order.shippingStatus = newShippingStatus;

    // C·ªông l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho cho t·ª´ng s·∫£n ph·∫©m/bi·∫øn th·ªÉ trong ƒë∆°n h√†ng
    for (const item of order.items) {
      await ProductVariant.updateOne(
        { _id: item.productVariantId, "sizes.size": item.size },
        { $inc: { "sizes.$.stock": item.quantity } },
        { session }
      );
    }

    // X·ª≠ l√Ω ho√†n ti·ªÅn cho c√°c ƒë∆°n h√†ng ƒë√£ thanh to√°n
    // Truy·ªÅn user ID thay v√¨ string cancelBy cho refundRequestedBy
    const userId = cancelBy === "buyer" ? req.user.id : null; // null cho admin/system
    const refundInfo = await processRefundForCancelledOrder(order, userId);

    // Th√™m l·ªãch s·ª≠ tr·∫°ng th√°i
    if (!order.statusHistory) {
      order.statusHistory = [];
    }
    order.statusHistory.push(...statusChanges);

    await order.save({ session });

    await session.commitTransaction();
    session.endSession();

    // G·ª≠i th√¥ng b√°o ho√†n ti·ªÅn n·∫øu c·∫ßn
    if (refundInfo.requiresRefund) {
      try {
        await sendTelegramMessage(
          `üí∏ Y√™u c·∫ßu ho√†n ti·ªÅn!\n` +
            `üìã M√£ ƒë∆°n: ${order.orderId}\n` +
            `üí∞ S·ªë ti·ªÅn: ${order.finalAmount.toLocaleString("vi-VN")}ƒë\n` +
            `üí≥ Ph∆∞∆°ng th·ª©c: ${order.paymentMethod}\n` +
            `üë§ H·ªßy b·ªüi: ${
              cancelBy === "buyer" ? "Kh√°ch h√†ng" : "Admin/Ng∆∞·ªùi b√°n"
            }\n` +
            `üìß Email: ${order.user.email}\n` +
            `üîÑ Tr·∫°ng th√°i: ${refundInfo.message}`
        );
      } catch (err) {
        console.error("G·ª≠i th√¥ng b√°o Telegram th·∫•t b·∫°i:", err);
      }
    }

    return res.status(200).json({
      message: "Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng",
      order,
      refundInfo,
    });
  } catch (error) {
    console.error("Error in cancelOrder:", error);

    // Rollback transaction n·∫øu c√≥ l·ªói
    if (session.inTransaction()) {
      await session.abortTransaction();
    }
    session.endSession();

    return res.status(500).json({
      message: "L·ªói khi hu·ª∑ ƒë∆°n h√†ng",
      error: error.message,
    });
  }
};
export const getAllOrders = async (req, res) => {
  try {
    const {
      _page = 1,
      _limit = 10,
      _sort = "createdAt",
      _order = "desc",
      _orderId,
      _user,
      _phone,
      _email,
      _address,
      _status,
    } = req.query;

    // T·∫°o query t√¨m ki·∫øm
    const query = {};
    if (_orderId) query.orderId = { $regex: _orderId, $options: "i" };
    if (_user) query["receiver.name"] = { $regex: _user, $options: "i" };
    if (_phone) query["receiver.phone"] = { $regex: _phone, $options: "i" };
    if (_email) query["user.email"] = { $regex: _email, $options: "i" };
    if (_address) query["user.address"] = { $regex: _address, $options: "i" };
    if (_status && _status !== "T·∫•t c·∫£") {
      // T√¨m theo paymentStatus ho·∫∑c shippingStatus
      query.$or = [{ paymentStatus: _status }, { shippingStatus: _status }];
    }

    const options = {
      page: parseInt(_page),
      limit: parseInt(_limit),
      sort: { [_sort]: _order === "desc" ? -1 : 1 },
      populate: {
        path: "items.productVariantId",
        model: "ProductVariant",
      },
    };

    const result = await Order.paginate(query, options);

    if (!result.docs || result.docs.length === 0) {
      return res.status(200).json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o" });
    }

    return res.status(200).json({
      data: result.docs,
      totalPages: result.totalPages,
      currentPage: result.page,
      total: result.totalDocs,
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const getOrders = async (req, res) => {
  try {
    const { _page = 1, _limit = 10, status, _userId } = req.query;

    const options = {
      page: parseInt(_page),
      limit: parseInt(_limit),
      populate: {
        path: "items.productVariantId",
        model: "ProductVariant",
      },
      sort: { createdAt: -1 },
    };

    const query = {};
    if (_userId) {
      query["user._id"] = _userId;
    }
    if (status && status !== "T·∫•t c·∫£") {
      query.$or = [{ paymentStatus: status }, { shippingStatus: status }];
    }
    const result = await Order.paginate(query, options);

    if (!result.docs || result.docs.length === 0) {
      return res.status(200).json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o" });
    }

    return res.status(200).json({
      data: result.docs,
      totalPages: result.totalPages,
      currentPage: result.page,
      total: result.totalDocs,
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};
export const getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(200).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
    }
    // L·∫•y danh s√°ch review c·ªßa user trong ƒë∆°n h√†ng n√†y
    const reviews = await Review.find({
      orderId: order._id,
      userId: req.user.id,
    });

    // Tr·∫£ v·ªÅ th√¥ng tin s·∫£n ph·∫©m t·ª´ snapshot cho t·ª´ng item (ch·ªâ d√πng snapshot, kh√¥ng populate Product)
    const itemsWithSnapshot = await Promise.all(
      order.items.map(async (item) => {
        // L·∫•y snapshot theo variantId v√† version
        const snapshot = await ProductVariantSnapshot.findOne({
          variantId: item.productVariantId,
          version: item.version,
        });
        const review = reviews.find(
          (r) =>
            r.productVariantId.toString() === item.productVariantId.toString()
        );
        return {
          ...item.toObject(),
          productInfo: snapshot ? snapshot.toObject() : null,
          reviewData: review || null,
        };
      })
    );

    const result = {
      ...order.toObject(),
      items: itemsWithSnapshot,
    };
    return res.status(200).json(result);
  } catch (error) {
    return res.status(400).json({
      message: error.message,
    });
  }
};
// Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i cho paymentStatus v√† shippingStatus
const allowedPaymentStatusTransitions = {
  "Ch·ªù thanh to√°n": [
    "ƒê√£ thanh to√°n",
    "Hu·ª∑ do qu√° th·ªùi gian thanh to√°n",
    "Giao d·ªãch b·ªã t·ª´ ch·ªëi do nh√† ph√°t h√†nh",
    "Ng∆∞·ªùi mua hu·ª∑",
    "Ng∆∞·ªùi b√°n hu·ª∑",
  ],
  "ƒê√£ thanh to√°n": ["Ng∆∞·ªùi mua hu·ª∑", "Ng∆∞·ªùi b√°n hu·ª∑"],
  "Thanh to√°n khi nh·∫≠n h√†ng": [
    "ƒê√£ thanh to√°n", // Khi giao h√†ng th√†nh c√¥ng ho·∫∑c x√°c nh·∫≠n nh·∫≠n h√†ng
    "Ng∆∞·ªùi mua hu·ª∑",
    "Ng∆∞·ªùi b√°n hu·ª∑",
  ],
  "Hu·ª∑ do qu√° th·ªùi gian thanh to√°n": [],
  "Giao d·ªãch b·ªã t·ª´ ch·ªëi do nh√† ph√°t h√†nh": [],
  "Ng∆∞·ªùi mua hu·ª∑": [],
  "Ng∆∞·ªùi b√°n hu·ª∑": [],
};
// Tr·∫°ng th√°i cho ph√©p admin chuy·ªÉn ƒë·ªïi (kh√¥ng bao g·ªìm khi·∫øu n·∫°i, ƒë√£ nh·∫≠n h√†ng v√† c√°c tr·∫°ng th√°i h·ªßy)
const allowedAdminShippingStatusTransitions = {
  "Ch·ªù x√°c nh·∫≠n": ["ƒê√£ x√°c nh·∫≠n"], // Lo·∫°i b·ªè option h·ªßy - ch·ªâ h·ªßy qua n√∫t ri√™ng/API ri√™ng
  "ƒê√£ x√°c nh·∫≠n": ["ƒêang giao h√†ng"], // Lo·∫°i b·ªè option h·ªßy - ch·ªâ h·ªßy qua n√∫t ri√™ng/API ri√™ng
  "ƒêang giao h√†ng": ["Giao h√†ng th√†nh c√¥ng", "Giao h√†ng th·∫•t b·∫°i"], // Lo·∫°i b·ªè option h·ªßy - ch·ªâ h·ªßy qua n√∫t ri√™ng/API ri√™ng
  "Giao h√†ng th√†nh c√¥ng": [], // Admin kh√¥ng th·ªÉ chuy·ªÉn sang "ƒê√£ nh·∫≠n h√†ng"
  "ƒê√£ nh·∫≠n h√†ng": [],
  "Giao h√†ng th·∫•t b·∫°i": [], // Kh√¥ng cho ph√©p h·ªßy t·ª´ tr·∫°ng th√°i n√†y - ch·ªâ h·ªßy qua n√∫t ri√™ng/API ri√™ng
  "Khi·∫øu n·∫°i": ["ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i"], // Ch·ªâ khi user ƒë√£ khi·∫øu n·∫°i
  "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i": ["Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt", "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi"],
  "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt": [],
  "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi": [],
  "Ng∆∞·ªùi mua hu·ª∑": [], // Tr·∫°ng th√°i cu·ªëi - ƒë√£ h·ªßy
  "Ng∆∞·ªùi b√°n hu·ª∑": [], // Tr·∫°ng th√°i cu·ªëi - ƒë√£ h·ªßy
};

// Tr·∫°ng th√°i cho ph√©p user/system chuy·ªÉn ƒë·ªïi (bao g·ªìm khi·∫øu n·∫°i v√† ƒë√£ nh·∫≠n h√†ng)
const allowedShippingStatusTransitions = {
  "Ch·ªù x√°c nh·∫≠n": ["ƒê√£ x√°c nh·∫≠n", "Ng∆∞·ªùi mua hu·ª∑", "Ng∆∞·ªùi b√°n hu·ª∑"],
  "ƒê√£ x√°c nh·∫≠n": ["ƒêang giao h√†ng", "Ng∆∞·ªùi b√°n hu·ª∑", "Ng∆∞·ªùi mua hu·ª∑"],
  "ƒêang giao h√†ng": [
    "Giao h√†ng th√†nh c√¥ng",
    "Giao h√†ng th·∫•t b·∫°i",
    "Khi·∫øu n·∫°i", // Ng∆∞·ªùi d√πng c√≥ th·ªÉ khi·∫øu n·∫°i khi ƒëang giao h√†ng
    "Ng∆∞·ªùi b√°n hu·ª∑",
    "Ng∆∞·ªùi mua hu·ª∑",
  ],
  "Giao h√†ng th√†nh c√¥ng": ["ƒê√£ nh·∫≠n h√†ng", "Khi·∫øu n·∫°i"], // User c√≥ th·ªÉ confirm nh·∫≠n h√†ng ho·∫∑c khi·∫øu n·∫°i
  "ƒê√£ nh·∫≠n h√†ng": [],
  "Giao h√†ng th·∫•t b·∫°i": ["Ng∆∞·ªùi b√°n hu·ª∑", "Ng∆∞·ªùi mua hu·ª∑", "Khi·∫øu n·∫°i"],
  "Khi·∫øu n·∫°i": ["ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i"],
  "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i": ["Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt", "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi"],
  "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt": [],
  "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi": [],
  "Ng∆∞·ªùi mua hu·ª∑": [],
  "Ng∆∞·ªùi b√°n hu·ª∑": [],
};

export const updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, paymentStatus, shippingStatus, receiver, note, reason } =
      req.body;

    if (!status && !paymentStatus && !shippingStatus && !receiver) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng cung c·∫•p th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t" });
    }

    // 1. T√¨m ƒë∆°n h√†ng hi·ªán t·∫°i
    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    // 2. Ki·ªÉm tra tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p chuy·ªÉn ƒë·ªïi
    const updateData = {};
    const statusChanges = [];

    // X·ª≠ l√Ω paymentStatus ri√™ng bi·ªát
    if (paymentStatus) {
      if (
        allowedPaymentStatusTransitions[order.paymentStatus]?.includes(
          paymentStatus
        )
      ) {
        updateData.paymentStatus = paymentStatus;
        statusChanges.push({
          type: "payment",
          from: order.paymentStatus,
          to: paymentStatus,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: note || "",
          reason: reason || "",
          isAutomatic: false,
        });
      } else {
        return res.status(400).json({
          message: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i thanh to√°n t·ª´ "${order.paymentStatus}" sang "${paymentStatus}".`,
        });
      }
    }

    // X·ª≠ l√Ω shippingStatus ri√™ng bi·ªát
    if (shippingStatus) {
      const isAdminUpdate =
        req.path.includes("/admin/") || req.user?.role === "admin";
      const allowedTransitions = isAdminUpdate
        ? allowedAdminShippingStatusTransitions
        : allowedShippingStatusTransitions;

      if (allowedTransitions[order.shippingStatus]?.includes(shippingStatus)) {
        updateData.shippingStatus = shippingStatus;

        if (
          shippingStatus === "Giao h√†ng th√†nh c√¥ng" &&
          order.paymentMethod === "COD" &&
          order.paymentStatus === "Thanh to√°n khi nh·∫≠n h√†ng"
        ) {
          updateData.paymentStatus = "ƒê√£ thanh to√°n";
          statusChanges.push({
            type: "payment",
            from: order.paymentStatus,
            to: "ƒê√£ thanh to√°n",
            updatedBy: req.user?.id || null,
            updatedAt: new Date(),
            note: "T·ª± ƒë·ªông c·∫≠p nh·∫≠t khi giao h√†ng th√†nh c√¥ng (COD)",
            reason: "Giao h√†ng th√†nh c√¥ng - Thanh to√°n COD",
            isAutomatic: true,
          });
        }

        statusChanges.push({
          type: "shipping",
          from: order.shippingStatus,
          to: shippingStatus,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: note || "",
          reason: reason || "",
          isAutomatic: false,
        });
      } else {
        return res.status(400).json({
          message: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i giao h√†ng t·ª´ "${order.shippingStatus}" sang "${shippingStatus}".`,
        });
      }
    }

    // X·ª≠ l√Ω status c≈©
    if (status) {
      const isAdminUpdate =
        req.path.includes("/admin/") || req.user?.role === "admin";
      const allowedTransitions = isAdminUpdate
        ? allowedAdminShippingStatusTransitions
        : allowedShippingStatusTransitions;

      if (
        allowedPaymentStatusTransitions[order.paymentStatus]?.includes(status)
      ) {
        updateData.paymentStatus = status;
        statusChanges.push({
          type: "payment",
          from: order.paymentStatus,
          to: status,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: note || "",
          reason: reason || "",
          isAutomatic: false,
        });
      } else if (allowedTransitions[order.shippingStatus]?.includes(status)) {
        updateData.shippingStatus = status;

        if (
          status === "Giao h√†ng th√†nh c√¥ng" &&
          order.paymentMethod === "COD" &&
          order.paymentStatus === "Thanh to√°n khi nh·∫≠n h√†ng"
        ) {
          updateData.paymentStatus = "ƒê√£ thanh to√°n";
          statusChanges.push({
            type: "payment",
            from: order.paymentStatus,
            to: "ƒê√£ thanh to√°n",
            updatedBy: req.user?.id || null,
            updatedAt: new Date(),
            note: "T·ª± ƒë·ªông c·∫≠p nh·∫≠t khi giao h√†ng th√†nh c√¥ng (COD)",
            reason: "Giao h√†ng th√†nh c√¥ng - Thanh to√°n COD",
            isAutomatic: true,
          });
        }

        statusChanges.push({
          type: "shipping",
          from: order.shippingStatus,
          to: status,
          updatedBy: req.user?.id || null,
          updatedAt: new Date(),
          note: note || "",
          reason: reason || "",
          isAutomatic: false,
        });
      } else {
        return res.status(400).json({
          message: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ "${order.paymentStatus}" ho·∫∑c "${order.shippingStatus}" sang "${status}".`,
        });
      }
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi nh·∫≠n
    if (receiver && typeof receiver === "object") {
      // So s√°nh th√¥ng tin ng∆∞·ªùi nh·∫≠n g·ª≠i l√™n v·ªõi th√¥ng tin hi·ªán t·∫°i
      const isReceiverChanged =
        receiver.name !== order.receiver.name ||
        receiver.phone !== order.receiver.phone ||
        receiver.address !== order.receiver.address ||
        receiver.wardName !== order.receiver.wardName ||
        receiver.districtName !== order.receiver.districtName ||
        receiver.cityName !== order.receiver.cityName;

      if (isReceiverChanged) {
        // Ch·ªâ ki·ªÉm tra tr·∫°ng th√°i n·∫øu th√¥ng tin ng∆∞·ªùi nh·∫≠n th·ª±c s·ª± thay ƒë·ªïi
        if (["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n"].includes(order.shippingStatus)) {
          if (receiver.name) updateData["receiver.name"] = receiver.name;
          if (receiver.phone) updateData["receiver.phone"] = receiver.phone;
          if (receiver.address) updateData["receiver.address"] = receiver.address;
          if (receiver.wardName)
            updateData["receiver.wardName"] = receiver.wardName;
          if (receiver.districtName)
            updateData["receiver.districtName"] = receiver.districtName;
          if (receiver.cityName)
            updateData["receiver.cityName"] = receiver.cityName;

          statusChanges.push({
            type: "receiver",
            from: JSON.stringify(order.receiver),
            to: JSON.stringify(receiver),
            updatedBy: req.user?.id || null,
            updatedAt: new Date(),
            note: note || "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi nh·∫≠n",
            reason: reason || "",
            isAutomatic: false,
          });
        } else {
          return res.status(400).json({
            message: `Kh√¥ng th·ªÉ s·ª≠a th√¥ng tin ng∆∞·ªùi nh·∫≠n khi tr·∫°ng th√°i giao h√†ng l√† "${order.shippingStatus}".`,
          });
        }
      }
    }

    // X·ª≠ l√Ω c·ªông l·∫°i stock v√† ho√†n ti·ªÅn khi h·ªßy ƒë∆°n h√†ng
    const isOrderBeingCancelled =
      (updateData.paymentStatus && updateData.paymentStatus.includes("hu·ª∑")) ||
      (updateData.shippingStatus && updateData.shippingStatus.includes("hu·ª∑"));

    let refundInfo = null;
    if (isOrderBeingCancelled) {
      try {
        const session = await mongoose.startSession();
        session.startTransaction();

        for (const item of order.items) {
          await ProductVariant.updateOne(
            { _id: item.productVariantId, "sizes.size": item.size },
            { $inc: { "sizes.$.stock": item.quantity } },
            { session }
          );
        }

        await session.commitTransaction();
        session.endSession();
        console.log(`üì¶ Restored stock for cancelled order ${order.orderId}`);

        refundInfo = await processRefundForCancelledOrder(order, req.user.id);

        if (refundInfo.requiresRefund && order.paymentDetails) {
          updateData.paymentDetails = order.paymentDetails;
        }

        if (refundInfo.requiresRefund) {
          try {
            console.log("Th√¥ng b√°o qua tele");
          } catch (err) {
            console.error("G·ª≠i th√¥ng b√°o Telegram th·∫•t b·∫°i:", err);
          }
        }
      } catch (stockError) {
        console.error("Error restoring stock for cancelled order:", stockError);
      }
    }

    // Th√™m l·ªãch s·ª≠ thay ƒë·ªïi v√†o updateData
    if (statusChanges.length > 0) {
      updateData.statusHistory = statusChanges;
    }

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    let updatedOrder;
    if (statusChanges.length > 0) {
      const { statusHistory, ...setData } = updateData;
      await Order.findByIdAndUpdate(id, {
        $set: setData,
        $push: { statusHistory: { $each: statusHistory } },
      });
      updatedOrder = await Order.findById(id).populate(
        "items.productVariantId"
      );
    } else {
      updatedOrder = await Order.findByIdAndUpdate(
        id,
        { $set: updateData },
        { new: true }
      ).populate("items.productVariantId");
    }

    const response = {
      message: "C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng",
      data: updatedOrder,
    };

    if (refundInfo) {
      response.refundInfo = refundInfo;
      if (refundInfo.requiresRefund) {
        response.message += ". " + refundInfo.message;
      }
    }

    return res.status(200).json(response);
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    return res
      .status(500)
      .json({ message: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau" });
  }
};

// T·ª± ƒë·ªông chuy·ªÉn tr·∫°ng th√°i "Giao h√†ng th√†nh c√¥ng" th√†nh "ƒê√£ nh·∫≠n h√†ng" sau 48h
export const autoConfirmDeliveredOrders = async () => {
  try {
    const fortyEightHoursAgo = new Date();
    fortyEightHoursAgo.setHours(fortyEightHoursAgo.getHours() - 48);

    const ordersToConfirm = await Order.find({
      shippingStatus: "Giao h√†ng th√†nh c√¥ng",
      updatedAt: { $lte: fortyEightHoursAgo },
    });

    console.log(
      `üîç Found ${ordersToConfirm.length} orders to auto-confirm delivery`
    );

    for (const order of ordersToConfirm) {
      const statusChanges = [];
      const updateData = {
        shippingStatus: "ƒê√£ nh·∫≠n h√†ng",
      };

      // Th√™m l·ªãch s·ª≠ thay ƒë·ªïi shipping status
      statusChanges.push({
        type: "shipping",
        from: "Giao h√†ng th√†nh c√¥ng",
        to: "ƒê√£ nh·∫≠n h√†ng",
        updatedBy: null, // T·ª± ƒë·ªông b·ªüi h·ªá th·ªëng
        updatedAt: new Date(),
        note: "T·ª± ƒë·ªông x√°c nh·∫≠n sau 48h",
        reason: "H·ªá th·ªëng t·ª± ƒë·ªông x√°c nh·∫≠n nh·∫≠n h√†ng sau 48h",
        isAutomatic: true,
      });

      // N·∫øu COD th√¨ c≈©ng c·∫≠p nh·∫≠t payment status
      if (
        order.paymentMethod === "COD" &&
        order.paymentStatus === "Thanh to√°n khi nh·∫≠n h√†ng"
      ) {
        updateData.paymentStatus = "ƒê√£ thanh to√°n";
        statusChanges.push({
          type: "payment",
          from: "Thanh to√°n khi nh·∫≠n h√†ng",
          to: "ƒê√£ thanh to√°n",
          updatedBy: null, // T·ª± ƒë·ªông b·ªüi h·ªá th·ªëng
          updatedAt: new Date(),
          note: "T·ª± ƒë·ªông x√°c nh·∫≠n thanh to√°n COD sau 48h",
          reason: "H·ªá th·ªëng t·ª± ƒë·ªông x√°c nh·∫≠n thanh to√°n COD sau 48h",
          isAutomatic: true,
        });
      }

      await Order.updateOne(
        { _id: order._id },
        {
          $set: updateData,
          $push: { statusHistory: { $each: statusChanges } },
        }
      );

      console.log(`‚úÖ Auto-confirmed delivery for order ${order.orderId}`);
    }

    return {
      success: true,
      confirmedOrdersCount: ordersToConfirm.length,
    };
  } catch (error) {
    console.error("‚ùå Error in autoConfirmDeliveredOrders:", error.message);
    return {
      success: false,
      error: error.message,
    };
  }
};

// Khi·∫øu n·∫°i ƒë∆°n h√†ng khi ch∆∞a nh·∫≠n ƒë∆∞·ª£c h√†ng
export const createComplaint = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { reason, description } = req.body;

    // Validate input
    if (!reason || !description) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng cung c·∫•p l√Ω do v√† m√¥ t·∫£ khi·∫øu n·∫°i",
      });
    }

    // T√¨m ƒë∆°n h√†ng v√† ki·ªÉm tra quy·ªÅn
    const order = await Order.findOne({
      orderId,
      "user._id": req.user.id,
    });

    console.log("üîç Debug createComplaint:");
    console.log("- orderId:", orderId);
    console.log("- userId:", req.user.id);
    console.log("- order found:", !!order);
    console.log("- order shippingStatus:", order?.shippingStatus);
    console.log("- order complaint exists:", !!order?.complaint);
    console.log("- order complaint details:", order?.complaint);

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ khi·∫øu n·∫°i
    const allowedComplaintStatuses = [
      "ƒêang giao h√†ng",
      "Giao h√†ng th√†nh c√¥ng",
      "Giao h√†ng th·∫•t b·∫°i",
    ];

    if (!allowedComplaintStatuses.includes(order.shippingStatus)) {
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ khi·∫øu n·∫°i ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "${order.shippingStatus}"`,
      });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ khi·∫øu n·∫°i ch∆∞a
    if (order.complaint && order.complaint.reason) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c khi·∫øu n·∫°i tr∆∞·ªõc ƒë√≥",
        currentComplaint: {
          reason: order.complaint.reason,
          status: order.complaint.status,
          createdAt: order.complaint.createdAt,
        },
      });
    }

    // T·∫°o khi·∫øu n·∫°i
    const complaintData = {
      reason,
      description,
      createdAt: new Date(),
      status: "Ch·ªù x·ª≠ l√Ω",
      images: req.body.images || [], // Cho ph√©p ƒë√≠nh k√®m h√¨nh ·∫£nh
    };

    // T·∫°o status history cho vi·ªác chuy·ªÉn sang khi·∫øu n·∫°i
    const statusChange = {
      type: "shipping",
      from: order.shippingStatus,
      to: "Khi·∫øu n·∫°i",
      updatedBy: req.user.id,
      updatedAt: new Date(),
      note: `Kh√°ch h√†ng khi·∫øu n·∫°i: ${reason}`,
      reason: `Kh√°ch h√†ng t·∫°o khi·∫øu n·∫°i - ${description}`,
      isAutomatic: false,
    };

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const updatedOrder = await Order.findByIdAndUpdate(
      order._id,
      {
        $set: {
          shippingStatus: "Khi·∫øu n·∫°i",
          complaint: complaintData,
        },
        $push: { statusHistory: statusChange },
      },
      { new: true }
    );

    return res.status(200).json({
      success: true,
      message: "Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng",
      data: {
        orderId: updatedOrder.orderId,
        complaint: updatedOrder.complaint,
        shippingStatus: updatedOrder.shippingStatus,
      },
    });
  } catch (error) {
    console.error("‚ùå Error in createComplaint:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi g·ª≠i khi·∫øu n·∫°i",
      error: error.message,
    });
  }
};

// X·ª≠ l√Ω khi·∫øu n·∫°i (cho admin)
export const processComplaint = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { action, adminNote, resolution } = req.body;

    // Validate input
    if (!action || !["accept", "reject", "processing"].includes(action)) {
      return res.status(400).json({
        success: false,
        message:
          "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: accept, reject, processing",
      });
    }

    // T√¨m ƒë∆°n h√†ng c√≥ khi·∫øu n·∫°i
    const order = await Order.findOne({
      orderId,
      shippingStatus: { $in: ["Khi·∫øu n·∫°i", "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i"] },
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c√≥ khi·∫øu n·∫°i",
      });
    }

    if (!order.complaint) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y kh√¥ng c√≥ khi·∫øu n·∫°i",
      });
    }

    // X·ª≠ l√Ω theo action
    let newShippingStatus;
    let complaintStatus;

    switch (action) {
      case "processing":
        newShippingStatus = "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i";
        complaintStatus = "ƒêang x·ª≠ l√Ω";
        break;
      case "accept":
        newShippingStatus = "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt";
        complaintStatus = "ƒê∆∞·ª£c ch·∫•p nh·∫≠n";
        break;
      case "reject":
        newShippingStatus = "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi";
        complaintStatus = "B·ªã t·ª´ ch·ªëi";
        break;
    }

    // C·∫≠p nh·∫≠t khi·∫øu n·∫°i
    const updatedComplaint = {
      ...order.complaint,
      status: complaintStatus,
      adminNote: adminNote || "",
      resolution: resolution || "",
      processedAt: new Date(),
      processedBy: req.user.id, // Admin ID
    };

    // T·∫°o status history cho vi·ªác x·ª≠ l√Ω khi·∫øu n·∫°i
    const statusChange = {
      type: "shipping",
      from: order.shippingStatus,
      to: newShippingStatus,
      updatedBy: req.user.id,
      updatedAt: new Date(),
      note: `Admin x·ª≠ l√Ω khi·∫øu n·∫°i: ${action} - ${adminNote || ""}`,
      reason: `X·ª≠ l√Ω khi·∫øu n·∫°i: ${resolution || ""}`,
      isAutomatic: false,
    };

    const updatedOrder = await Order.findByIdAndUpdate(
      order._id,
      {
        $set: {
          shippingStatus: newShippingStatus,
          complaint: updatedComplaint,
        },
        $push: { statusHistory: statusChange },
      },
      { new: true }
    );

    return res.status(200).json({
      success: true,
      message: `Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c ${
        action === "accept"
          ? "ch·∫•p nh·∫≠n"
          : action === "reject"
          ? "t·ª´ ch·ªëi"
          : "x·ª≠ l√Ω"
      }`,
      data: {
        orderId: updatedOrder.orderId,
        complaint: updatedOrder.complaint,
        shippingStatus: updatedOrder.shippingStatus,
      },
    });
  } catch (error) {
    console.error("‚ùå Error in processComplaint:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi x·ª≠ l√Ω khi·∫øu n·∫°i",
      error: error.message,
    });
  }
};

// L·∫•y danh s√°ch khi·∫øu n·∫°i (cho admin)
export const getComplaints = async (req, res) => {
  try {
    const { _page = 1, _limit = 10, status } = req.query;

    const query = {
      complaint: { $exists: true },
    };

    if (status && status !== "T·∫•t c·∫£") {
      query["complaint.status"] = status;
    }

    const options = {
      page: parseInt(_page),
      limit: parseInt(_limit),
      sort: { "complaint.createdAt": -1 },
      populate: {
        path: "items.productVariantId",
        model: "ProductVariant",
      },
    };

    const result = await Order.paginate(query, options);

    return res.status(200).json({
      success: true,
      data: result.docs,
      totalPages: result.totalPages,
      currentPage: result.page,
      total: result.totalDocs,
    });
  } catch (error) {
    console.error("‚ùå Error in getComplaints:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch khi·∫øu n·∫°i",
      error: error.message,
    });
  }
};

// H√†m debug: Reset khi·∫øu n·∫°i cho testing (ch·ªâ d√πng trong development)
export const resetComplaint = async (req, res) => {
  try {
    const { orderId } = req.params;

    const order = await Order.findOne({
      orderId,
      "user._id": req.user.id,
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // X√≥a khi·∫øu n·∫°i v√† reset tr·∫°ng th√°i
    const updatedOrder = await Order.findByIdAndUpdate(
      order._id,
      {
        $unset: { complaint: 1 },
        $set: { shippingStatus: "Giao h√†ng th√†nh c√¥ng" },
      },
      { new: true }
    );

    return res.status(200).json({
      success: true,
      message: "ƒê√£ reset khi·∫øu n·∫°i th√†nh c√¥ng",
      data: {
        orderId: updatedOrder.orderId,
        shippingStatus: updatedOrder.shippingStatus,
        complaint: updatedOrder.complaint,
      },
    });
  } catch (error) {
    console.error("‚ùå Error in resetComplaint:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi reset khi·∫øu n·∫°i",
      error: error.message,
    });
  }
};

// API ƒë·ªÉ admin x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng ho·∫∑c g·ªçi API ho√†n ti·ªÅn
export const processRefund = async (req, res) => {
  try {
    const { orderId } = req.params;
    const {
      action,
      adminNote,
      refundMethod,
      refundTransactionId,
      useAutoRefund,
    } = req.body;

    // Validate input
    if (
      !action ||
      !["approve", "reject", "completed", "auto_refund"].includes(action)
    ) {
      return res.status(400).json({
        success: false,
        message:
          "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: approve, reject, completed, auto_refund",
      });
    }

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findOne({ orderId });
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ c·∫ßn ho√†n ti·ªÅn kh√¥ng
    if (!order.paymentDetails?.refundRequested) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y kh√¥ng c√≥ y√™u c·∫ßu ho√†n ti·ªÅn",
      });
    }

    // X·ª≠ l√Ω ho√†n ti·ªÅn t·ª± ƒë·ªông qua API
    if (
      action === "auto_refund" &&
      (order.paymentMethod === "MoMo" || order.paymentMethod === "zalopay")
    ) {
      try {
        const refundResult = await processAutoRefund(order);

        if (refundResult.success) {
          // Ho√†n ti·ªÅn th√†nh c√¥ng
          const refundUpdates = {
            refundStatus: "ƒê√£ ho√†n th√†nh",
            refundProcessedAt: new Date(),
            refundProcessedBy: req.user.id,
            adminNote: adminNote || "Ho√†n ti·ªÅn t·ª± ƒë·ªông th√†nh c√¥ng",
            refundMethod: `${order.paymentMethod} API`,
            refundId: refundResult.refundId,
            refundCompletedAt: new Date(),
          };

          await Order.findByIdAndUpdate(order._id, {
            $set: {
              paymentDetails: {
                ...order.paymentDetails,
                ...refundUpdates,
              },
            },
          });

          // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
          try {
            await sendTelegramMessage(
              `‚úÖ Ho√†n ti·ªÅn t·ª± ƒë·ªông th√†nh c√¥ng!\n` +
                `üìã M√£ ƒë∆°n: ${order.orderId}\n` +
                `üí∞ S·ªë ti·ªÅn: ${order.finalAmount.toLocaleString("vi-VN")}ƒë\n` +
                `üí≥ Ph∆∞∆°ng th·ª©c: ${order.paymentMethod} API\n` +
                `üÜî Refund ID: ${refundResult.refundId}\n` +
                `üë§ X·ª≠ l√Ω b·ªüi: ${req.user.email}\n` +
                `üìß Kh√°ch h√†ng: ${order.user.email}`
            );
          } catch (err) {
            console.error("G·ª≠i th√¥ng b√°o Telegram th·∫•t b·∫°i:", err);
          }

          return res.status(200).json({
            success: true,
            message: "Ho√†n ti·ªÅn t·ª± ƒë·ªông th√†nh c√¥ng",
            data: {
              orderId: order.orderId,
              refundId: refundResult.refundId,
              refundAmount: order.finalAmount,
              paymentMethod: order.paymentMethod,
            },
          });
        } else {
          // Ho√†n ti·ªÅn th·∫•t b·∫°i
          await Order.findByIdAndUpdate(order._id, {
            $set: {
              paymentDetails: {
                ...order.paymentDetails,
                autoRefundError: refundResult.error,
                autoRefundAttemptedAt: new Date(),
                autoRefundAttemptedBy: req.user.id,
              },
            },
          });

          return res.status(400).json({
            success: false,
            message: "Ho√†n ti·ªÅn t·ª± ƒë·ªông th·∫•t b·∫°i",
            error: refundResult.error,
            suggestion: "Vui l√≤ng x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng",
          });
        }
      } catch (error) {
        console.error("‚ùå Auto refund error:", error);
        return res.status(500).json({
          success: false,
          message: "L·ªói khi th·ª±c hi·ªán ho√†n ti·ªÅn t·ª± ƒë·ªông",
          error: error.message,
        });
      }
    }

    // X·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng
    const refundUpdates = {
      refundStatus:
        action === "approve"
          ? "ƒê√£ duy·ªát"
          : action === "reject"
          ? "B·ªã t·ª´ ch·ªëi"
          : "ƒê√£ ho√†n th√†nh",
      refundProcessedAt: new Date(),
      refundProcessedBy: req.user.id,
      adminNote: adminNote || "",
    };

    if (action === "completed") {
      refundUpdates.refundMethod = refundMethod;
      refundUpdates.refundTransactionId = refundTransactionId;
      refundUpdates.refundCompletedAt = new Date();
    }

    // C·∫≠p nh·∫≠t payment details
    const updatedOrder = await Order.findByIdAndUpdate(
      order._id,
      {
        $set: {
          paymentDetails: {
            ...order.paymentDetails,
            ...refundUpdates,
          },
        },
      },
      { new: true }
    );

    // G·ª≠i th√¥ng b√°o Telegram
    try {
      const statusText =
        action === "approve"
          ? "ƒë√£ ƒë∆∞·ª£c duy·ªát"
          : action === "reject"
          ? "b·ªã t·ª´ ch·ªëi"
          : "ƒë√£ ho√†n th√†nh";

      await sendTelegramMessage(
        `üí∏ C·∫≠p nh·∫≠t ho√†n ti·ªÅn!\n` +
          `üìã M√£ ƒë∆°n: ${order.orderId}\n` +
          `üí∞ S·ªë ti·ªÅn: ${order.finalAmount.toLocaleString("vi-VN")}ƒë\n` +
          `üîÑ Tr·∫°ng th√°i: ${statusText}\n` +
          `üë§ X·ª≠ l√Ω b·ªüi: ${req.user.email}\n` +
          `üìß Kh√°ch h√†ng: ${order.user.email}\n` +
          `üìù Ghi ch√∫: ${adminNote || "Kh√¥ng c√≥"}`
      );
    } catch (err) {
      console.error("G·ª≠i th√¥ng b√°o Telegram th·∫•t b·∫°i:", err);
    }

    return res.status(200).json({
      success: true,
      message: `Ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c ${
        action === "approve"
          ? "duy·ªát"
          : action === "reject"
          ? "t·ª´ ch·ªëi"
          : "ho√†n th√†nh"
      }`,
      data: {
        orderId: updatedOrder.orderId,
        paymentDetails: updatedOrder.paymentDetails,
      },
    });
  } catch (error) {
    console.error("‚ùå Error in processRefund:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi x·ª≠ l√Ω ho√†n ti·ªÅn",
      error: error.message,
    });
  }
};

// API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn t·ª´ gateway
export const checkRefundStatus = async (req, res) => {
  try {
    const { orderId } = req.params;

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findOne({ orderId });
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra c√≥ refund ID kh√¥ng
    const refundId = order.paymentDetails?.refundId;
    if (!refundId) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y ch∆∞a c√≥ y√™u c·∫ßu ho√†n ti·ªÅn ho·∫∑c ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω",
      });
    }

    let statusResult;
    switch (order.paymentMethod) {
      case "MoMo":
        statusResult = await checkMoMoRefundStatus(refundId);
        break;
      case "zalopay":
        statusResult = await checkZaloPayRefundStatus(refundId);
        break;
      default:
        return res.status(400).json({
          success: false,
          message: `Ph∆∞∆°ng th·ª©c thanh to√°n ${order.paymentMethod} kh√¥ng h·ªó tr·ª£ ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn t·ª± ƒë·ªông`,
        });
    }

    if (statusResult.success) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c√≥ thay ƒë·ªïi
      const currentStatus = order.paymentDetails.refundStatus;
      const newStatus =
        statusResult.data.status || statusResult.data.resultCode;

      if (currentStatus !== newStatus) {
        await Order.findByIdAndUpdate(order._id, {
          $set: {
            "paymentDetails.refundStatus": newStatus,
            "paymentDetails.lastStatusCheck": new Date(),
            "paymentDetails.gatewayResponse": statusResult.data,
          },
        });
      }

      return res.status(200).json({
        success: true,
        message: "Ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn th√†nh c√¥ng",
        data: {
          orderId: order.orderId,
          refundId,
          paymentMethod: order.paymentMethod,
          currentStatus: order.paymentDetails.refundStatus,
          gatewayStatus: newStatus,
          gatewayResponse: statusResult.data,
        },
      });
    } else {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn",
        error: statusResult.error,
      });
    }
  } catch (error) {
    console.error("‚ùå Error in checkRefundStatus:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn",
      error: error.message,
    });
  }
};

// API ƒë·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng c·∫ßn ho√†n ti·ªÅn
export const getRefundRequests = async (req, res) => {
  try {
    const { _page = 1, _limit = 10, status } = req.query;

    const query = {
      "paymentDetails.refundRequested": true,
    };

    if (status && status !== "T·∫•t c·∫£") {
      query["paymentDetails.refundStatus"] = status;
    }

    const options = {
      page: parseInt(_page),
      limit: parseInt(_limit),
      sort: { "paymentDetails.refundRequestedAt": -1 },
      populate: {
        path: "items.productVariantId",
        model: "ProductVariant",
      },
    };

    const result = await Order.paginate(query, options);

    return res.status(200).json({
      success: true,
      data: result.docs,
      totalPages: result.totalPages,
      currentPage: result.page,
      total: result.totalDocs,
    });
  } catch (error) {
    console.error("‚ùå Error in getRefundRequests:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn",
      error: error.message,
    });
  }
};

// API ƒë·ªÉ x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng
export const processManualRefund = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { note } = req.body;

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findOne({ orderId });
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra quy·ªÅn admin
    if (req.user.role != "3") {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x·ª≠ l√Ω ho√†n ti·ªÅn",
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (!order.paymentDetails?.refundRequested) {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y ch∆∞a y√™u c·∫ßu ho√†n ti·ªÅn",
      });
    }

    if (order.paymentDetails.refundStatus === "completed") {
      return res.status(400).json({
        success: false,
        message: "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
    order.paymentDetails.refundStatus = "processing";
    order.paymentDetails.refundNote =
      note || "Admin ƒëang x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng";
    await order.save();

    let refundResult;

    try {
      // G·ªçi API ho√†n ti·ªÅn t∆∞∆°ng t·ª± nh∆∞ logic h·ªßy ƒë∆°n h√†ng
      const refundInfo = await processRefundForCancelledOrder(
        order,
        req.user._id
      );

      if (refundInfo.status.includes("completed")) {
        // Ho√†n ti·ªÅn th√†nh c√¥ng
        await order.save(); // order ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong processRefundForCancelledOrder

        return res.status(200).json({
          success: true,
          message: "Ho√†n ti·ªÅn th√†nh c√¥ng",
          data: {
            orderId: order.orderId,
            refundId: order.paymentDetails.refundTransactionId,
            amount: order.finalAmount,
            status: "completed",
          },
        });
      } else {
        // Ho√†n ti·ªÅn th·∫•t b·∫°i ho·∫∑c c·∫ßn x·ª≠ l√Ω th·ªß c√¥ng
        await order.save(); // order ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong processRefundForCancelledOrder

        return res.status(400).json({
          success: false,
          message: "Ho√†n ti·ªÅn th·∫•t b·∫°i",
          error: refundInfo.message,
          data: {
            orderId: order.orderId,
            status: order.paymentDetails.refundStatus,
          },
        });
      }
    } catch (error) {
      // L·ªói khi g·ªçi API
      order.paymentDetails.refundStatus = "failed";
      order.paymentDetails.refundNote = `L·ªói khi g·ªçi API ho√†n ti·ªÅn: ${
        error.message
      }. ${note || ""}`;
      await order.save();

      return res.status(500).json({
        success: false,
        message: "L·ªói khi x·ª≠ l√Ω ho√†n ti·ªÅn",
        error: error.message,
        data: {
          orderId: order.orderId,
          status: "failed",
        },
      });
    }
  } catch (error) {
    console.error("‚ùå Error in processManualRefund:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω ho√†n ti·ªÅn",
      error: error.message,
    });
  }
};

export const getOrderStatusHistory = async (req, res) => {
  try {
    const { orderId } = req.params;

    const order = await Order.findOne({ orderId })
      .select("orderId user statusHistory paymentStatus shippingStatus")
      .populate("statusHistory.updatedBy", "email name");

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p (ch·ªâ ch·ªß ƒë∆°n h√†ng ho·∫∑c admin)
    if (
      req.user.role !== "admin" &&
      order.user._id.toString() !== req.user.id.toString()
    ) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch s·ª≠ ƒë∆°n h√†ng n√†y",
      });
    }

    return res.status(200).json({
      success: true,
      data: {
        orderId: order.orderId,
        currentPaymentStatus: order.paymentStatus,
        currentShippingStatus: order.shippingStatus,
        statusHistory: order.statusHistory.sort(
          (a, b) => new Date(a.updatedAt) - new Date(b.updatedAt)
        ),
      },
    });
  } catch (error) {
    console.error("‚ùå Error in getOrderStatusHistory:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng",
      error: error.message,
    });
  }
};
