import Conversation from "../models/conversation.js";
import Message from "../models/message.js";
import User from "../models/user.js";
import cloudinary from "../config/cloudinary.js";
import Product from "../models/product.js";
import ProductVariant from "../models/productVariant.js";
import Category from "../models/categories.js";
import mongoose from "mongoose";

// AI Response Generator - Simple rule-based AI
const generateAIResponse = async (userMessage, conversation) => {
  const message = userMessage.toLowerCase();

  // 1. Giao h√†ng & ph√≠ ship
  if (
    message.includes("ship") ||
    message.includes("giao h√†ng") ||
    message.includes("ph√≠ v·∫≠n chuy·ªÉn")
  ) {
    return {
      type: "text",
      content: "Shop giao h√†ng to√†n qu·ªëc trong 2‚Äì5 ng√†y. Mi·ªÖn ph√≠ ship cho ƒë∆°n t·ª´ 500k b·∫°n nh√©!",
    };
  }

  // 2. Ch√≠nh s√°ch ƒë·ªïi tr·∫£
  if (
    message.includes("ƒë·ªïi") ||
    message.includes("tr·∫£") ||
    message.includes("ho√†n h√†ng")
  ) {
    return {
      type: "text",
      content: "B·∫°n c√≥ th·ªÉ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng, mi·ªÖn ph√≠ ƒë·ªïi size l·∫ßn ƒë·∫ßu.",
    };
  }

  // 3. T∆∞ v·∫•n size
  if (
    message.includes("size") ||
    message.includes("m·∫∑c v·ª´a kh√¥ng") ||
    message.includes("cao") ||
    message.includes("n·∫∑ng")
  ) {
    return {
      type: "text",
      content: "B·∫°n vui l√≤ng cho m√¨nh chi·ªÅu cao v√† c√¢n n·∫∑ng, shop s·∫Ω t∆∞ v·∫•n size ph√π h·ª£p. Ngo√†i ra c√≥ b·∫£ng size chi ti·∫øt tr√™n m·ªói s·∫£n ph·∫©m.",
    };
  }

  // 4. Khuy·∫øn m√£i / voucher
  if (
    message.includes("gi·∫£m gi√°") ||
    message.includes("khuy·∫øn m√£i") ||
    message.includes("voucher") ||
    message.includes("m√£")
  ) {
    return {
      type: "text",
      content: "Hi·ªán t·∫°i shop c√≥ m√£ GIAM10 gi·∫£m 10% cho ƒë∆°n t·ª´ 500k. B·∫°n mu·ªën m√¨nh √°p d·ª•ng cho gi·ªè h√†ng c·ªßa b·∫°n kh√¥ng?",
    };
  }

  // 5. S·∫£n ph·∫©m hot / mix ƒë·ªì
  if (
    message.includes("hot") ||
    message.includes("trend") ||
    message.includes("m·∫´u m·ªõi") ||
    message.includes("ph·ªëi")
  ) {
    return {
      type: "text",
      content: "√Åo s∆° mi tr·∫Øng v√† qu·∫ßn jeans xanh ƒëang l√† item hot. B·∫°n c√≥ th·ªÉ mix c√πng gi√†y sneaker ƒë·ªÉ th√™m nƒÉng ƒë·ªông.",
    };
  }

  // 6. Ch·∫•t li·ªáu & gi·∫∑t ·ªßi
  if (
    message.includes("ch·∫•t li·ªáu") ||
    message.includes("v·∫£i") ||
    message.includes("b·ªÅn kh√¥ng") ||
    message.includes("gi·∫∑t")
  ) {
    return {
      type: "text",
      content: "S·∫£n ph·∫©m ƒë∆∞·ª£c l√†m t·ª´ cotton tho√°ng m√°t, d·ªÖ gi·∫∑t, gi·ªØ form t·ªët sau nhi·ªÅu l·∫ßn s·ª≠ d·ª•ng.",
    };
  }

  // 7. Ki·ªÉm tra t·ªìn kho
  if (
    message.includes("c√≤n h√†ng") ||
    message.includes("h·∫øt h√†ng") ||
    message.includes("size s") ||
    message.includes("size m") ||
    message.includes("size l")
  ) {
    return {
      type: "text",
      content: "B·∫°n vui l√≤ng cho m√¨nh t√™n s·∫£n ph·∫©m, shop s·∫Ω ki·ªÉm tra t·ªìn kho v√† b√°o l·∫°i ngay!",
    };
  }

  // 8. H√†ng l·ªói / b·∫£o h√†nh
  if (
    message.includes("l·ªói") ||
    message.includes("r√°ch") ||
    message.includes("bung ch·ªâ") ||
    message.includes("h·ªèng")
  ) {
    return {
      type: "text",
      content: "N·∫øu s·∫£n ph·∫©m l·ªói do nh√† s·∫£n xu·∫•t, shop s·∫Ω h·ªó tr·ª£ ƒë·ªïi m·ªõi trong v√≤ng 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng.",
    };
  }

  // 9. C√¢u ch√†o c∆° b·∫£n
  if (
    message.includes("hello") ||
    message.includes("xin ch√†o") ||
    message.includes("hi") ||
    message.includes("ch√†o shop")
  ) {
    return {
      type: "text",
      content: "Xin ch√†o üëã! M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m ho·∫∑c t∆∞ v·∫•n size kh√¥ng?",
    };
  }
  // C√¢u ch√†o h·ªèi
  if (
    message.includes("xin ch√†o") ||
    message.includes("hello") ||
    message.includes("hi")
  ) {
    return {
      type: "text",
      content:
        "Xin ch√†o! T√¥i l√† AI t∆∞ v·∫•n c·ªßa Elavia. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m, tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ch√≠nh s√°ch v√† h·ªó tr·ª£ mua s·∫Øm. B·∫°n c·∫ßn t√¥i gi√∫p g√¨?",
    };
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi logic c·∫£i ti·∫øn
  if (
    message.includes("t√¨m") ||
    message.includes("s·∫£n ph·∫©m") ||
    message.includes("√°o") ||
    message.includes("qu·∫ßn") ||
    message.includes("v√°y") ||
    message.includes("ƒë·∫ßm") ||
    message.includes("s∆° mi") ||
    message.includes("thun") ||
    message.includes("kho√°c") ||
    message.includes("jean") ||
    message.includes("short") ||
    message.includes("nam") ||
    message.includes("n·ªØ") ||
    message.includes("unisex") ||
    message.includes("mu·ªën xem")
  ) {
    const products = await getRecommendedProducts(message);
    if (products.length > 0) {
      const product = products[0];

      // Ph√¢n t√≠ch size t·ª´ th√¥ng s·ªë c∆° th·ªÉ n·∫øu c√≥
      const recommendedSize = getRecommendedSizeFromMessage(message);

      // Ch·ªçn size ph√π h·ª£p v√† c√≥ stock
      let selectedSize =
        product.sizes.find((s) => s.stock > 0) || product.sizes[0];
      if (recommendedSize) {
        // T√¨m size kh·ªõp v·ªõi g·ª£i √Ω v√† c√≥ stock
        const matchingSize = product.sizes.find(
          (s) => s.size === recommendedSize && s.stock > 0
        );
        if (matchingSize) {
          selectedSize = matchingSize;
        } else {
          // T√¨m size g·∫ßn nh·∫•t c√≥ stock
          const availableSizes = product.sizes.filter((s) => s.stock > 0);
          if (availableSizes.length > 0) {
            const nearestSize = findNearestSize(
              recommendedSize,
              availableSizes.map((s) => s.size)
            );
            if (nearestSize) {
              selectedSize =
                availableSizes.find((s) => s.size === nearestSize) ||
                availableSizes[0];
            }
          }
        }
      }

      // ƒê·∫£m b·∫£o c√≥ t√™n s·∫£n ph·∫©m t·ª´ Product model
      const productName = product.productId?.name || product.name || "S·∫£n ph·∫©m";
      const productImage =
        product.images?.main?.url ||
        product.images?.[0]?.url ||
        "/images/no-image.png";
      const productColor =
        product.color?.colorName || product.color?.name || "ƒêa m√†u";

      return {
        type: "product",
        content: JSON.stringify({
          variantId: product._id,
          name: productName,
          image: productImage,
          price: selectedSize.price,
          discount: product.discount || 0,
          color: productColor,
          size: selectedSize.size,
          stock: selectedSize.stock,
        }),
      };
    } else {
      return {
        type: "text",
        content:
          "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m kh√¥ng?",
      };
    }
  }

  // C√¢u h·ªèi v·ªÅ gi√°
  if (
    message.includes("gi√°") ||
    message.includes("bao nhi√™u") ||
    message.includes("cost") ||
    message.includes("price")
  ) {
    return {
      type: "text",
      content:
        "S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i c√≥ nhi·ªÅu m·ª©c gi√° kh√°c nhau t·ª´ 200.000ƒë - 2.000.000ƒë t√πy theo lo·∫°i s·∫£n ph·∫©m. B·∫°n c√≥ s·∫£n ph·∫©m c·ª• th·ªÉ n√†o mu·ªën h·ªèi gi√° kh√¥ng?",
    };
  }

  // C√¢u h·ªèi v·ªÅ giao h√†ng
  if (
    message.includes("giao h√†ng") ||
    message.includes("ship") ||
    message.includes("delivery")
  ) {
    return {
      type: "text",
      content:
        "Ch√∫ng t√¥i c√≥ c√°c h√¨nh th·ª©c giao h√†ng:\n‚Ä¢ Giao h√†ng ti√™u chu·∫©n: 2-3 ng√†y (30.000ƒë)\n‚Ä¢ Giao h√†ng nhanh: 1-2 ng√†y (50.000ƒë)\n‚Ä¢ Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng tr√™n 500.000ƒë",
    };
  }

  // C√¢u h·ªèi v·ªÅ ƒë·ªïi tr·∫£
  if (
    message.includes("ƒë·ªïi") ||
    message.includes("tr·∫£") ||
    message.includes("return") ||
    message.includes("exchange")
  ) {
    return {
      type: "text",
      content:
        "Ch√≠nh s√°ch ƒë·ªïi tr·∫£ c·ªßa ch√∫ng t√¥i:\n‚Ä¢ ƒê·ªïi tr·∫£ trong v√≤ng 30 ng√†y\n‚Ä¢ S·∫£n ph·∫©m ch∆∞a qua s·ª≠ d·ª•ng\n‚Ä¢ C√≤n nguy√™n tem, nh√£n m√°c\n‚Ä¢ Mi·ªÖn ph√≠ ƒë·ªïi size trong 7 ng√†y ƒë·∫ßu",
    };
  }

  // C√¢u h·ªèi v·ªÅ thanh to√°n
  if (
    message.includes("thanh to√°n") ||
    message.includes("payment") ||
    message.includes("pay")
  ) {
    return {
      type: "text",
      content:
        "Ch√∫ng t√¥i h·ªó tr·ª£ c√°c h√¨nh th·ª©c thanh to√°n:\n‚Ä¢ COD (thanh to√°n khi nh·∫≠n h√†ng)\n‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n‚Ä¢ V√≠ ƒëi·ªán t·ª≠: MoMo, ZaloPay\n‚Ä¢ Th·∫ª t√≠n d·ª•ng/ghi n·ª£",
    };
  }

  // C√¢u h·ªèi v·ªÅ size v·ªõi ph√¢n t√≠ch th√¥ng s·ªë c∆° th·ªÉ
  if (
    message.includes("size") ||
    message.includes("k√≠ch c·ª°") ||
    message.includes("c·ª°")
  ) {
    const sizeRecommendation = analyzeSizeFromMessage(message);
    if (sizeRecommendation) {
      return {
        type: "text",
        content: sizeRecommendation,
      };
    } else {
      return {
        type: "text",
        content:
          "Ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß size t·ª´ S ƒë·∫øn XXL. B·∫£ng size chi ti·∫øt:\n‚Ä¢ S: 45-50kg\n‚Ä¢ M: 50-55kg\n‚Ä¢ L: 55-65kg\n‚Ä¢ XL: 65-75kg\n‚Ä¢ XXL: 75kg tr·ªü l√™n\n\nB·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c√¢n n·∫∑ng v√† chi·ªÅu cao ƒë·ªÉ t√¥i t∆∞ v·∫•n size ph√π h·ª£p nh·∫•t!",
      };
    }
  }

  // C√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
  return {
    type: "text",
    content:
      "T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£. Tuy nhi√™n, c√¢u h·ªèi n√†y h∆°i ph·ª©c t·∫°p. B·∫°n c√≥ mu·ªën t√¥i k·∫øt n·ªëi v·ªõi t∆∞ v·∫•n vi√™n con ng∆∞·ªùi ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?",
  };
};

// Ph√¢n t√≠ch size t·ª´ tin nh·∫Øn c√≥ ch·ª©a th√¥ng s·ªë c∆° th·ªÉ
const analyzeSizeFromMessage = (message) => {
  // T√¨m c√¢n n·∫∑ng (kg)
  const weightMatch = message.match(/(\d+)\s*(kg|k√≠|k√Ω)/i);
  // T√¨m chi·ªÅu cao (m ho·∫∑c cm) 
  const heightMatch = message.match(/(\d+(?:\.\d+)?)\s*m(?:\s|$)|(\d+)\s*cm/i);
  
  let weight = null;
  let height = null; // T√≠nh b·∫±ng cm
  
  if (weightMatch) {
    weight = parseInt(weightMatch[1]);
  }
  
  if (heightMatch) {
    if (heightMatch[1]) {
      // N·∫øu c√≥ ƒë∆°n v·ªã m√©t (v√≠ d·ª•: 1.8m)
      height = parseFloat(heightMatch[1]) * 100;
    } else if (heightMatch[2]) {
      // N·∫øu c√≥ ƒë∆°n v·ªã cm (v√≠ d·ª•: 180cm)
      height = parseInt(heightMatch[2]);
    }
  }
  
  console.log('Analyzed body measurements:', { weight, height });
  
  // N·∫øu c√≥ ƒë·ªß th√¥ng tin c√¢n n·∫∑ng v√† chi·ªÅu cao
  if (weight && height) {
    // T√≠nh BMI
    const heightInMeter = height / 100;
    const bmi = weight / (heightInMeter * heightInMeter);
    
    // Logic g·ª£i √Ω size d·ª±a tr√™n c√¢n n·∫∑ng, chi·ªÅu cao v√† BMI
    let recommendedSize;
    let explanation = '';
    
    if (weight <= 50) {
      recommendedSize = 'S';
      explanation = 'ph√π h·ª£p v·ªõi ng∆∞·ªùi c√≥ c√¢n n·∫∑ng nh·∫π';
    } else if (weight <= 55) {
      recommendedSize = 'M';
      explanation = 'ph√π h·ª£p v·ªõi c√¢n n·∫∑ng trung b√¨nh';
    } else if (weight <= 65) {
      recommendedSize = 'L';
      explanation = 'ph√π h·ª£p v·ªõi c√¢n n·∫∑ng v·ª´a ph·∫£i';
    } else if (weight <= 75) {
      recommendedSize = 'XL';
      explanation = 'ph√π h·ª£p v·ªõi ng∆∞·ªùi c√≥ c√¢n n·∫∑ng kh√°';
    } else if (weight <= 85) {
      recommendedSize = 'XXL';
      explanation = 'ph√π h·ª£p v·ªõi c√¢n n·∫∑ng l·ªõn';
    } else {
      // C√¢n n·∫∑ng > 85kg
      recommendedSize = 'XXL+';
      explanation = 'b·∫°n c√≥ th·ªÉ c·∫ßn size ƒë·∫∑c bi·ªát';
    }
    
    // ƒêi·ªÅu ch·ªânh d·ª±a tr√™n chi·ªÅu cao
    if (height >= 180) {
      if (recommendedSize === 'S') recommendedSize = 'M';
      else if (recommendedSize === 'M') recommendedSize = 'L';
      else if (recommendedSize === 'L') recommendedSize = 'XL';
      explanation += '. Do chi·ªÅu cao kh√° cao (>=1m8), t√¥i ƒë√£ ƒëi·ªÅu ch·ªânh size l√™n m·ªôt c·ª°';
    } else if (height <= 160) {
      if (recommendedSize === 'XL') recommendedSize = 'L';
      else if (recommendedSize === 'XXL') recommendedSize = 'XL';
      explanation += '. Do chi·ªÅu cao kh√° th·∫•p (<=1m6), size c√≥ th·ªÉ nh·ªè h∆°n m·ªôt ch√∫t';
    }
    
    // Ph·∫£n h·ªìi v·ªõi g·ª£i √Ω c·ª• th·ªÉ
    let response = `üìè **Ph√¢n t√≠ch th√¥ng s·ªë c·ªßa b·∫°n:**\n`;
    response += `‚Ä¢ C√¢n n·∫∑ng: ${weight}kg\n`;
    response += `‚Ä¢ Chi·ªÅu cao: ${height}cm (${(height/100).toFixed(1)}m)\n`;
    response += `‚Ä¢ BMI: ${bmi.toFixed(1)} ${getBMICategory(bmi)}\n\n`;
    response += `üéØ **G·ª£i √Ω size: ${recommendedSize}**\n`;
    response += `${explanation}\n\n`;
    response += `üìã **B·∫£ng size tham kh·∫£o:**\n`;
    response += `‚Ä¢ S: 45-50kg\n`;
    response += `‚Ä¢ M: 50-55kg\n`;
    response += `‚Ä¢ L: 55-65kg\n`;
    response += `‚Ä¢ XL: 65-75kg\n`;
    response += `‚Ä¢ XXL: 75kg tr·ªü l√™n\n\n`;
    response += `üí° **L∆∞u √Ω:** ƒê√¢y ch·ªâ l√† g·ª£i √Ω d·ª±a tr√™n th√¥ng s·ªë c∆° b·∫£n. ƒê·ªÉ ch·ªçn size ch√≠nh x√°c nh·∫•t, b·∫°n n√™n ƒëo 3 v√≤ng (ng·ª±c-eo-m√¥ng) ho·∫∑c li√™n h·ªá t∆∞ v·∫•n vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt h∆°n!`;
    
    return response;
  }
  
  // N·∫øu ch·ªâ c√≥ c√¢n n·∫∑ng
  if (weight) {
    let recommendedSize;
    if (weight <= 50) recommendedSize = 'S';
    else if (weight <= 55) recommendedSize = 'M';
    else if (weight <= 65) recommendedSize = 'L';
    else if (weight <= 75) recommendedSize = 'XL';
    else recommendedSize = 'XXL';
    
    let response = `‚öñÔ∏è V·ªõi c√¢n n·∫∑ng ${weight}kg, t√¥i g·ª£i √Ω size **${recommendedSize}**.\n\n`;
    response += `Tuy nhi√™n, ƒë·ªÉ ch·ªçn size ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi·ªÅu cao kh√¥ng? ƒêi·ªÅu n√†y s·∫Ω gi√∫p t√¥i t∆∞ v·∫•n size ph√π h·ª£p nh·∫•t! üòä`;
    
    return response;
  }
  
  return null; // Kh√¥ng c√≥ th√¥ng tin ƒë·ªß ƒë·ªÉ ph√¢n t√≠ch
};

// Ph√¢n lo·∫°i BMI
const getBMICategory = (bmi) => {
  if (bmi < 18.5) return '(thi·∫øu c√¢n)';
  if (bmi < 25) return '(b√¨nh th∆∞·ªùng)';
  if (bmi < 30) return '(th·ª´a c√¢n)';
  return '(b√©o ph√¨)';
};

// L·∫•y size g·ª£i √Ω t·ª´ tin nh·∫Øn (r√∫t g·ªçn t·ª´ analyzeSizeFromMessage)
const getRecommendedSizeFromMessage = (message) => {
  const weightMatch = message.match(/(\d+)\s*(kg|k√≠|k√Ω)/i);
  const heightMatch = message.match(/(\d+(?:\.\d+)?)\s*m(?:\s|$)|(\d+)\s*cm/i);
  
  let weight = null;
  let height = null;
  
  if (weightMatch) {
    weight = parseInt(weightMatch[1]);
  }
  
  if (heightMatch) {
    if (heightMatch[1]) {
      height = parseFloat(heightMatch[1]) * 100;
    } else if (heightMatch[2]) {
      height = parseInt(heightMatch[2]);
    }
  }
  
  // Ch·ªâ tr·∫£ v·ªÅ size g·ª£i √Ω, kh√¥ng ph·∫£i text ƒë·∫ßy ƒë·ªß
  if (weight) {
    let recommendedSize;
    
    if (weight <= 50) recommendedSize = 'S';
    else if (weight <= 55) recommendedSize = 'M';
    else if (weight <= 65) recommendedSize = 'L';
    else if (weight <= 75) recommendedSize = 'XL';
    else recommendedSize = 'XXL';
    
    // ƒêi·ªÅu ch·ªânh theo chi·ªÅu cao
    if (height >= 180) {
      if (recommendedSize === 'S') recommendedSize = 'M';
      else if (recommendedSize === 'M') recommendedSize = 'L';
      else if (recommendedSize === 'L') recommendedSize = 'XL';
      else if (recommendedSize === 'XL') recommendedSize = 'XXL';
    } else if (height <= 160) {
      if (recommendedSize === 'XL') recommendedSize = 'L';
      else if (recommendedSize === 'XXL') recommendedSize = 'XL';
    }
    
    return recommendedSize;
  }
  
  return null;
};

// T√¨m size g·∫ßn nh·∫•t c√≥ s·∫µn
const findNearestSize = (targetSize, availableSizes) => {
  const sizeOrder = ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'];
  const targetIndex = sizeOrder.indexOf(targetSize);
  
  if (targetIndex === -1) return availableSizes[0]; // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ size ƒë·∫ßu ti√™n
  
  // T√¨m size g·∫ßn nh·∫•t
  for (let i = 0; i < sizeOrder.length; i++) {
    const checkSize = sizeOrder[targetIndex + i] || sizeOrder[targetIndex - i];
    if (checkSize && availableSizes.includes(checkSize)) {
      return checkSize;
    }
  }
  
  return availableSizes[0]; // Fallback
};

// Helper function ƒë·ªÉ t√¨m categoryId theo hierarchy
const findCategoryByHierarchy = async (genderName, productTypeName) => {
  try {
    console.log(`üîç Finding category for: ${genderName} -> ${productTypeName}`);
    
    // B∆∞·ªõc 1: T√¨m gender category (level 1)
    const genderCategory = await Category.findOne({
      name: { $regex: new RegExp(genderName, 'i') },
      level: 1
    });
    
    if (!genderCategory) {
      console.log('‚ùå Gender category not found:', genderName);
      return null;
    }
    
    console.log('‚úÖ Found gender category:', genderCategory.name, genderCategory._id);
    
    // B∆∞·ªõc 2: T√¨m t·∫•t c·∫£ subcategories level 2 c·ªßa gender
    const level2Categories = await Category.find({
      parentId: genderCategory._id,
      level: 2
    });
    
    console.log('üìÇ Level 2 categories:', level2Categories.map(c => c.name));
    
    // B∆∞·ªõc 3: T√¨m product category (level 3) trong c√°c level 2 categories
    for (const level2Cat of level2Categories) {
      const productCategories = await Category.find({
        parentId: level2Cat._id,
        level: 3,
        name: { $regex: new RegExp(productTypeName, 'i') }
      });
      
      if (productCategories.length > 0) {
        const foundCategory = productCategories[0];
        console.log('‚úÖ Found product category:', foundCategory.name, foundCategory._id);
        console.log('üéØ Full hierarchy:', `${genderCategory.name} -> ${level2Cat.name} -> ${foundCategory.name}`);
        return foundCategory._id;
      }
    }
    
    console.log('‚ùå Product category not found:', productTypeName);
    return null;
    
  } catch (error) {
    console.error('Error finding category:', error);
    return null;
  }
};

// T√¨m s·∫£n ph·∫©m g·ª£i √Ω d·ª±a tr√™n t·ª´ kh√≥a v√† category hierarchy v·ªõi logic c·∫£i ti·∫øn v√† category hierarchy
const getRecommendedProducts = async (query) => {
  try {
    console.log('üîç AI searching for:', query);
    
    // Chu·∫©n h√≥a v√† ph√¢n t√≠ch query
    const normalizedQuery = query.toLowerCase();
    let searchTerms = [];
    let genderFilter = null;
    let categoryIds = [];
    
    // Ph√¢n t√≠ch gi·ªõi t√≠nh t·ª´ query
    if (normalizedQuery.includes('nam') || normalizedQuery.includes('men')) {
      genderFilter = 'Nam'; // ƒê·∫£m b·∫£o case ƒë√∫ng v·ªõi database
    } else if (normalizedQuery.includes('n·ªØ') || normalizedQuery.includes('women')) {
      genderFilter = 'N·ªØ'; // ƒê·∫£m b·∫£o case ƒë√∫ng v·ªõi database
    }
    
    console.log('üë§ Gender filter:', genderFilter);
    
    // Ph√¢n t√≠ch lo·∫°i s·∫£n ph·∫©m v√† t√¨m category t∆∞∆°ng ·ª©ng
    const productTypeMapping = {
      '√°o s∆° mi': '√Åo s∆° mi',
      's∆° mi': '√Åo s∆° mi', 
      'shirt': '√Åo s∆° mi',
      '√°o thun': '√Åo thun',
      'thun': '√Åo thun',
      't-shirt': '√Åo thun',
      '√°o kho√°c': '√Åo kho√°c',
      'kho√°c': '√Åo kho√°c',
      'jacket': '√Åo kho√°c',
      'qu·∫ßn jean': 'Qu·∫ßn jean',
      'jean': 'Qu·∫ßn jean',
      'jeans': 'Qu·∫ßn jean',
      'qu·∫ßn √¢u': 'Qu·∫ßn √¢u',
      '√¢u': 'Qu·∫ßn √¢u',
      'v√°y': 'V√°y',
      'dress': 'V√°y',
      'ƒë·∫ßm': 'ƒê·∫ßm',
      'qu·∫ßn short': 'Qu·∫ßn short',
      'short': 'Qu·∫ßn short'
    };
    
    let detectedProductType = null;
    
    // T√¨m lo·∫°i s·∫£n ph·∫©m t·ª´ query
    for (const [keyword, categoryName] of Object.entries(productTypeMapping)) {
      if (normalizedQuery.includes(keyword)) {
        detectedProductType = categoryName;
        console.log(`üì¶ Detected product type: ${categoryName}`);
        break;
      }
    }
    
    // N·∫øu t√¨m th·∫•y lo·∫°i s·∫£n ph·∫©m, t√¨m category hierarchy
    if (detectedProductType && genderFilter) {
      const categoryId = await findCategoryByHierarchy(genderFilter, detectedProductType);
      if (categoryId) {
        categoryIds.push(categoryId);
        console.log('‚úÖ Using category hierarchy search with categoryId:', categoryId);
      } else {
        console.log('‚ùå No matching category found, falling back to text search');
      }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y category, d√πng search terms nh∆∞ c≈©
    if (categoryIds.length === 0) {
      if (detectedProductType) {
        searchTerms.push(detectedProductType.toLowerCase());
      }
      if (genderFilter) {
        searchTerms.push(genderFilter);
      }
      
      // Th√™m c√°c t·ª´ kh√≥a kh√°c t·ª´ query
      const additionalTerms = normalizedQuery.split(' ').filter(word => 
        word.length > 2 && 
        !['t√¥i', 'mu·ªën', 'xem', 'c·∫ßn', 't√¨m', 'cho', 'c·ªßa', 'm·ªôt', 'c√°i', 'd√†nh'].includes(word)
      );
      searchTerms.push(...additionalTerms);
    }
    
    console.log('ÔøΩ Category IDs found:', categoryIds);
    console.log('ÔøΩüè∑Ô∏è Fallback search terms:', searchTerms);
    
    let products = [];
    
    // ∆Øu ti√™n t√¨m ki·∫øm theo category tr∆∞·ªõc
    if (categoryIds.length > 0) {
      console.log('üéØ Searching by category hierarchy...');
      console.log('üéØ Target categoryIds:', categoryIds);
      
      // T√¨m tr·ª±c ti·∫øp Product c√≥ categoryId ph√π h·ª£p
      const matchingProducts = await Product.find({
        categoryId: { $in: categoryIds }
      }).select('_id name description shortDescription categoryId');

      console.log(`üîç Found ${matchingProducts.length} Products with matching categoryId`);
      
      // Debug: Show all matching products
      matchingProducts.forEach((product, index) => {
        console.log(`üì¶ Product ${index + 1}: "${product.name}" (CategoryId: ${product.categoryId})`);
      });

      if (matchingProducts.length > 0) {
        // L·∫•y ProductVariant t·ª´ nh·ªØng Product ƒë√£ t√¨m ƒë∆∞·ª£c
        const productIds = matchingProducts.map(p => p._id);
        
        products = await ProductVariant.find({
          productId: { $in: productIds },
          status: true,
          'sizes.stock': { $gt: 0 }
        })
        .populate({
          path: 'productId',
          select: 'name description shortDescription categoryId'
        })
        .limit(10)
        .sort({ 
          'sizes.stock': -1,
          createdAt: -1
        });

        console.log(`üì¶ Found ${products.length} ProductVariants from matching Products`);
        
        // Debug: Show final products
        products.forEach((variant, index) => {
          console.log(`‚úÖ Final Product ${index + 1}: "${variant.productId?.name || 'No name'}" (CategoryId: ${variant.productId?.categoryId})`);
        });
      }
      
      console.log(` Found ${products.length} products by category`);
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m theo category ho·∫∑c kh√¥ng c√≥ category, d√πng text search
    if (products.length === 0 && searchTerms.length > 0) {
      console.log('üîÑ Fallback to text search...');
      
      const searchRegex = new RegExp(searchTerms.join('|'), 'i');
      
      // T√¨m trong Product table tr∆∞·ªõc
      const matchingProducts = await Product.find({
        $or: [
          { 'name': searchRegex },
          { 'description': searchRegex },
          { 'shortDescription': searchRegex }
        ]
      }).select('_id');

      const productIds = matchingProducts.map(p => p._id);
      
      // Sau ƒë√≥ t√¨m ProductVariant
      let searchConditions = {
        status: true,
        'sizes.stock': { $gt: 0 }
      };
      
      if (productIds.length > 0) {
        searchConditions.$or = [
          { 'productId': { $in: productIds } },
          { 'color.colorName': searchRegex },
          { 'attributes.value': searchRegex },
          { 'sku': searchRegex }
        ];
      } else {
        searchConditions.$or = [
          { 'color.colorName': searchRegex },
          { 'attributes.value': searchRegex },
          { 'sku': searchRegex }
        ];
      }
      
      products = await ProductVariant.find(searchConditions)
        .populate('productId', 'name description shortDescription categoryId')
        .limit(10)
        .sort({ 
          'sizes.stock': -1,
          createdAt: -1
        });
        
      console.log(`üì¶ Found ${products.length} products by text search`);
    }
    
    // Filter theo gender n·∫øu c·∫ßn 
    if (genderFilter) {
      console.log(`üîç Filtering products by gender: ${genderFilter}`);
      
      const filteredProducts = products.filter(product => {
        if (!product.productId) return false;
        
        // N·∫øu ƒë√£ t√¨m theo category hierarchy, tin t∆∞·ªüng k·∫øt qu·∫£
        if (categoryIds.length > 0) {
          console.log(`‚úÖ Product from category hierarchy: ${product.productId.name}`);
          return true;
        }
        
        // N·∫øu l√† text search, filter theo text
        const productName = product.productId.name?.toLowerCase() || '';
        const description = product.productId.description?.toLowerCase() || '';
        const attributes = product.attributes || [];
        
        const genderMatch = productName.includes(genderFilter.toLowerCase()) || 
               description.includes(genderFilter.toLowerCase()) ||
               attributes.some(attr => attr.value?.toLowerCase().includes(genderFilter.toLowerCase()));
               
        console.log(`${genderMatch ? '‚úÖ' : '‚ùå'} Gender filter for "${product.productId.name}": ${genderMatch}`);
        return genderMatch;
      });
      
      if (filteredProducts.length > 0) {
        products = filteredProducts;
        console.log(`üéØ After gender filter: ${products.length} products`);
      } else {
        console.log('‚ö†Ô∏è No products match gender filter, keeping original results');
      }
    }
    
    console.log(`‚úÖ Final result: ${products.length} products`);
    return products.slice(0, 5);
    
  } catch (error) {
    console.error('‚ùå Error getting recommended products:', error);
    return [];
  }
};

// L·∫•y ho·∫∑c t·∫°o conversation cho user
export const getOrCreateConversation = async (req, res) => {
  try {
    const userId = req.user.id;

    console.log("getOrCreateConversation debug:", {
      userId,
      userIdType: typeof userId,
      userFromToken: req.user,
    });

    // T√¨m conversation active ho·∫∑c waiting c·ªßa user
    let conversation = await Conversation.findOne({
      userId,
      status: { $in: ["waiting", "active"] },
    }).populate("adminId", "name email");

    console.log("Found existing conversation:", !!conversation);

    // N·∫øu kh√¥ng c√≥, t·∫°o m·ªõi
    if (!conversation) {
      conversation = new Conversation({
        userId,
        metadata: {
          userAgent: req.headers["user-agent"],
          ip: req.ip,
          page: req.headers.referer || req.headers.origin,
        },
      });
      await conversation.save();

      console.log("Created new conversation:", {
        id: conversation._id,
        userId: conversation.userId,
      });

      // Populate sau khi save
      await conversation.populate("adminId", "name email");
    }

    res.json({
      success: true,
      conversation,
    });
  } catch (error) {
    console.error("Get conversation error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y cu·ªôc tr√≤ chuy·ªán",
      error: error.message,
    });
  }
};

// G·ª≠i tin nh·∫Øn
export const sendMessage = async (req, res) => {
  try {
    const { conversationId, content, type = "text" } = req.body;
    const senderId = req.user.id;
    // S·ª≠a logic role: 1 = user, 3 = admin
    const senderType =
      req.user.role === 3 || req.user.role === "3" ? "admin" : "user";

    console.log("Send message debug:", {
      senderId,
      userRole: req.user.role,
      userRoleType: typeof req.user.role,
      senderType,
      conversationId,
      isValidObjectId: mongoose.Types.ObjectId.isValid(conversationId),
    });

    // Validate ObjectId
    if (!mongoose.Types.ObjectId.isValid(conversationId)) {
      return res.status(400).json({
        success: false,
        message: "ID cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá",
      });
    }

    // Ki·ªÉm tra conversation t·ªìn t·∫°i
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
      });
    }

    console.log("Conversation found:", {
      conversationUserId: conversation.userId,
      conversationUserIdString: conversation.userId.toString(),
      conversationStatus: conversation.status,
      adminId: conversation.adminId,
      senderId,
      senderIdString: senderId.toString(),
      comparison: conversation.userId.toString() === senderId.toString(),
    });

    // Ki·ªÉm tra quy·ªÅn g·ª≠i tin nh·∫Øn
    // User ch·ªâ c√≥ th·ªÉ g·ª≠i tin nh·∫Øn v√†o conversation c·ªßa m√¨nh
    // Admin c√≥ th·ªÉ g·ª≠i tin nh·∫Øn v√†o b·∫•t k·ª≥ conversation n√†o (tr·ª´ closed)
    if (
      senderType === "user" &&
      conversation.userId.toString() !== senderId.toString()
    ) {
      console.log("‚ùå Permission denied:", {
        senderType,
        conversationUserId: conversation.userId.toString(),
        senderId: senderId.toString(),
        match: conversation.userId.toString() === senderId.toString(),
      });
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán n√†y",
      });
    }

    // Admin kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn v√†o conversation ƒë√£ ƒë√≥ng
    if (senderType === "admin" && conversation.status === "closed") {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn v√†o cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë√≥ng",
      });
    }

    // T·∫°o tin nh·∫Øn m·ªõi
    const message = new Message({
      conversationId,
      senderId,
      senderType,
      type,
      content,
    });

    await message.save();

    // C·∫≠p nh·∫≠t conversation
    const updateData = {
      lastMessageAt: new Date(),
    };

    // N·∫øu admin g·ª≠i tin nh·∫Øn v√† ch∆∞a ƒë∆∞·ª£c assign
    if (senderType === "admin" && !conversation.adminId) {
      updateData.adminId = senderId;
      updateData.status = "active";
    }

    // N·∫øu conversation ƒëang waiting v√† c√≥ tin nh·∫Øn m·ªõi
    if (conversation.status === "waiting") {
      updateData.status = senderType === "admin" ? "active" : "waiting";
    }

    await Conversation.findByIdAndUpdate(conversationId, updateData);

    // Populate sender info
    await message.populate("senderId", "name email");

    // N·∫øu l√† user g·ª≠i tin nh·∫Øn v√† conversation c√≥ b·∫≠t AI, trigger AI response
    if (senderType === "user") {
      // Trigger AI response asynchronously (kh√¥ng ch·ªù ƒë·ªÉ response nhanh)
      setTimeout(async () => {
        await processAIResponse(conversationId, content);
      }, 1000); // Delay 1 gi√¢y ƒë·ªÉ gi·ªëng nh∆∞ admin th·∫≠t s·ª± ƒëang typing
    }

    res.json({
      success: true,
      message,
    });
  } catch (error) {
    console.error("Send message error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi g·ª≠i tin nh·∫Øn",
      error: error.message,
    });
  }
};

// AI Response - G·ª≠i tin nh·∫Øn t·ª± ƒë·ªông t·ª´ AI
export const sendAIMessage = async (req, res) => {
  try {
    const { conversationId, enableAI = false } = req.body;
    const userId = req.user.id;

    // Ki·ªÉm tra conversation t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user
    const conversation = await Conversation.findById(conversationId);
    if (!conversation || conversation.userId.toString() !== userId.toString()) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i AI cho conversation
    await Conversation.findByIdAndUpdate(conversationId, { 
      aiEnabled: enableAI,
      status: enableAI ? 'active' : conversation.status 
    });

    res.json({
      success: true,
      message: enableAI ? 'ƒê√£ b·∫≠t t∆∞ v·∫•n vi√™n AI' : 'ƒê√£ t·∫Øt t∆∞ v·∫•n vi√™n AI',
      aiEnabled: enableAI
    });

  } catch (error) {
    console.error("AI toggle error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t AI",
      error: error.message,
    });
  }
};

// Process AI Response sau khi user g·ª≠i tin nh·∫Øn
export const processAIResponse = async (conversationId, userMessage) => {
  try {
    // Ki·ªÉm tra conversation c√≥ b·∫≠t AI kh√¥ng
    const conversation = await Conversation.findById(conversationId);
    if (!conversation || !conversation.aiEnabled) {
      return;
    }

    // T·∫°o AI response
    const aiResponse = await generateAIResponse(userMessage, conversation);
    
    // T·∫°o fake admin user cho AI
    const aiAdminUser = {
      _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439011'),
      name: 'AI Assistant',
      email: 'ai@elavia.com'
    };
    
    // L∆∞u tin nh·∫Øn AI v√†o DB
    const aiMessage = new Message({
      conversationId,
      senderId: aiAdminUser._id,
      senderType: 'admin',
      type: aiResponse.type,
      content: aiResponse.content,
    });

    await aiMessage.save();

    // Manual populate ƒë·ªÉ tr√°nh l·ªói populate v·ªõi fake ID
    aiMessage.senderId = aiAdminUser;

    // C·∫≠p nh·∫≠t conversation
    await Conversation.findByIdAndUpdate(conversationId, {
      lastMessageAt: new Date(),
      status: 'active'
    });

    console.log('AI response sent:', aiResponse);
    return aiMessage;

  } catch (error) {
    console.error('Process AI response error:', error);
  }
};

// L·∫•y tin nh·∫Øn trong conversation
export const getMessages = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const { page = 1, limit = 50 } = req.query;
    const userId = req.user.id;
    const userRole = req.user.role;



    // Validate ObjectId
    if (!mongoose.Types.ObjectId.isValid(conversationId)) {
      return res.status(400).json({
        success: false,
        message: "ID cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá",
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
      });
    }

    // Ki·ªÉm tra quy·ªÅn: user ch·ªâ xem conversation c·ªßa m√¨nh, admin xem t·∫•t c·∫£
    // Role: 1 = user, 3 = admin
    const isAdmin = userRole === 3 || userRole === "3";
    if (!isAdmin && conversation.userId.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p cu·ªôc tr√≤ chuy·ªán n√†y",
      });
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { createdAt: -1 }, // Tin nh·∫Øn m·ªõi nh·∫•t tr∆∞·ªõc
      populate: {
        path: "senderId",
        select: "name email",
      },
    };

    const messages = await Message.paginate({ conversationId }, options);

    // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc tin nh·∫Øn
    await Message.updateMany(
      {
        conversationId,
        "readBy.userId": { $ne: userId },
      },
      {
        $push: {
          readBy: {
            userId,
            readAt: new Date(),
          },
        },
      }
    );

    res.json({
      success: true,
      messages: messages.docs.reverse(), // ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ tin nh·∫Øn c≈© tr∆∞·ªõc
      pagination: {
        currentPage: messages.page,
        totalPages: messages.totalPages,
        totalMessages: messages.totalDocs,
        hasNextPage: messages.hasNextPage,
        hasPrevPage: messages.hasPrevPage,
      },
    });
  } catch (error) {
    console.error("Get messages error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y tin nh·∫Øn",
      error: error.message,
    });
  }
};

// ƒê√≥ng conversation (ch·ªâ admin)
export const closeConversation = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const adminId = req.user.id;

    // S·ª≠a logic role check: 1 = user, 3 = admin
    if (req.user.role !== 3 && req.user.role !== "3") {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ admin m·ªõi c√≥ th·ªÉ ƒë√≥ng cu·ªôc tr√≤ chuy·ªán",
      });
    }

    const conversation = await Conversation.findByIdAndUpdate(
      conversationId,
      {
        status: "closed",
        adminId,
      },
      { new: true }
    );

    if (!conversation) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
      });
    }

    // T·∫°o tin nh·∫Øn h·ªá th·ªëng
    const systemMessage = new Message({
      conversationId,
      senderId: adminId,
      senderType: "admin",
      type: "system",
      content: "Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c ƒë√≥ng",
    });

    await systemMessage.save();

    res.json({
      success: true,
      conversation,
      message: "ƒê√£ ƒë√≥ng cu·ªôc tr√≤ chuy·ªán",
    });
  } catch (error) {
    console.error("Close conversation error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi ƒë√≥ng cu·ªôc tr√≤ chuy·ªán",
      error: error.message,
    });
  }
};

// L·∫•y danh s√°ch conversations cho user
export const getUserConversations = async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 10 } = req.query;

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { lastMessageAt: -1 },
      populate: [
        {
          path: "adminId",
          select: "name email",
        },
      ],
    };

    const conversations = await Conversation.paginate({ userId }, options);

    res.json({
      success: true,
      conversations: conversations.docs,
      pagination: {
        currentPage: conversations.page,
        totalPages: conversations.totalPages,
        totalConversations: conversations.totalDocs,
        hasNextPage: conversations.hasNextPage,
        hasPrevPage: conversations.hasPrevPage,
      },
    });
  } catch (error) {
    console.error("Get user conversations error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán",
      error: error.message,
    });
  }
};

// Upload ·∫£nh cho chat
export const uploadChatImage = async (req, res) => {
  try {
    console.log("Upload chat image debug:", {
      fileExists: !!req.file,
      fileOriginalName: req.file?.originalname,
      fileSize: req.file?.size,
      fileMimetype: req.file?.mimetype,
      hasBuffer: !!req.file?.buffer,
    });

    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng c√≥ file ƒë∆∞·ª£c upload",
      });
    }

    // Upload l√™n Cloudinary v·ªõi buffer
    const result = await cloudinary.uploader.upload(
      `data:${req.file.mimetype};base64,${req.file.buffer.toString("base64")}`,
      {
        folder: "chat_images",
        resource_type: "image",
        transformation: [
          { width: 800, height: 600, crop: "limit" },
          { quality: "auto" },
          { format: "webp" },
        ],
      }
    );

    console.log("Cloudinary upload result:", {
      publicId: result.public_id,
      url: result.secure_url,
    });

    res.json({
      success: true,
      imageUrl: result.secure_url,
      publicId: result.public_id,
    });
  } catch (error) {
    console.error("Upload chat image error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi upload ·∫£nh",
      error: error.message,
    });
  }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m cho admin g·ª≠i trong chat
export const getChatProducts = async (req, res) => {
  try {
    const { search, page = 1, limit = 10 } = req.query;

    // Build search query
    const searchQuery = { status: true }; // Ch·ªâ l·∫•y s·∫£n ph·∫©m active
    if (search) {
      searchQuery.$or = [
        { name: { $regex: search, $options: "i" } },
        { shortDescription: { $regex: search, $options: "i" } },
        { description: { $regex: search, $options: "i" } },
      ];
    }

    // L·∫•y s·∫£n ph·∫©m
    const products = await Product.find(searchQuery)
      .populate("categoryId", "name")
      .populate("representativeVariantId")
      .select(
        "name sku shortDescription description categoryId representativeVariantId"
      )
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip((parseInt(page) - 1) * parseInt(limit));

    // L·∫•y variants cho m·ªói product
    const productsWithVariants = await Promise.all(
      products.map(async (product) => {
        const variants = await ProductVariant.find({
          productId: product._id,
          "sizes.stock": { $gt: 0 }, // Ch·ªâ l·∫•y variant c√≥ stock > 0
        })
          .select("sku color images attributes sizes")
          .limit(5); // Gi·ªõi h·∫°n 5 variants ƒë·ªÉ tr√°nh qu√° t·∫£i

        return {
          _id: product._id,
          name: product.name,
          sku: product.sku,
          description: product.shortDescription || product.description,
          category: product.categoryId?.name,
          representativeVariant: product.representativeVariantId,
          variants: variants,
        };
      })
    );

    // Filter out products without variants
    const availableProducts = productsWithVariants.filter(
      (product) => product.variants && product.variants.length > 0
    );

    res.json({
      success: true,
      products: availableProducts,
      pagination: {
        currentPage: parseInt(page),
        hasMore: products.length === parseInt(limit),
      },
    });
  } catch (error) {
    console.error("Get chat products error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m",
      error: error.message,
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i AI cho conversation
export const updateConversationAI = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const { enableAI = false } = req.body;
    const userId = req.user.id;

    console.log("Update AI status:", {
      conversationId,
      enableAI,
      userId,
      isValidObjectId: mongoose.Types.ObjectId.isValid(conversationId)
    });

    // Validate ObjectId
    if (!mongoose.Types.ObjectId.isValid(conversationId)) {
      return res.status(400).json({
        success: false,
        message: "ID cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá",
      });
    }

    // Ki·ªÉm tra conversation t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán",
      });
    }

    // Ki·ªÉm tra quy·ªÅn
    if (conversation.userId.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán n√†y",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i AI
    const updatedConversation = await Conversation.findByIdAndUpdate(
      conversationId, 
      { 
        aiEnabled: enableAI,
        status: enableAI ? 'active' : conversation.status 
      },
      { new: true }
    );

    // T·∫°o system message th√¥ng b√°o
    const aiUserId = new mongoose.Types.ObjectId('507f1f77bcf86cd799439011');
    const systemMessage = new Message({
      conversationId,
      senderId: aiUserId,
      senderType: "admin",
      type: "text",
      content: enableAI 
        ? "ü§ñ **T∆∞ v·∫•n vi√™n AI ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!**\n\nT√¥i s·∫Ω h·ªó tr·ª£ b·∫°n ngay l·∫≠p t·ª©c v·ªõi:\n‚Ä¢ T√¨m ki·∫øm s·∫£n ph·∫©m\n‚Ä¢ T∆∞ v·∫•n size\n‚Ä¢ Ch√≠nh s√°ch mua h√†ng\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!" 
        : "üë®‚Äçüíº **T∆∞ v·∫•n vi√™n AI ƒë√£ ƒë∆∞·ª£c t·∫Øt.**\n\nB·∫°n c√≥ th·ªÉ ch·ªù t∆∞ v·∫•n vi√™n con ng∆∞·ªùi h·ªó tr·ª£ ho·∫∑c b·∫≠t l·∫°i AI b·∫•t c·ª© l√∫c n√†o.",
    });

    await systemMessage.save();

    console.log("‚úÖ AI status updated successfully");

    res.json({
      success: true,
      message: enableAI ? 'ƒê√£ b·∫≠t t∆∞ v·∫•n vi√™n AI' : 'ƒê√£ t·∫Øt t∆∞ v·∫•n vi√™n AI',
      aiEnabled: enableAI,
      conversation: updatedConversation
    });

  } catch (error) {
    console.error("‚ùå Update AI status error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i AI",
      error: error.message,
    });
  }
};
